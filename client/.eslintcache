[{"/Users/katydonoghue/Desktop/garden-app/client/src/index.js":"1","/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js":"2","/Users/katydonoghue/Desktop/garden-app/client/src/App.js":"3","/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js":"4","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js":"5","/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js":"6","/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js":"7","/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js":"8","/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js":"9","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducer.js":"10","/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js":"11","/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js":"12","/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js":"13","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js":"14","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js":"15","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js":"16","/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js":"17","/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js":"18","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddGarden.js":"19","/Users/katydonoghue/Desktop/garden-app/client/src/utils/history.js":"20","/Users/katydonoghue/Desktop/garden-app/client/src/components/DeleteGarden.js":"21","/Users/katydonoghue/Desktop/garden-app/client/src/components/DeletePlant.js":"22","/Users/katydonoghue/Desktop/garden-app/client/src/components/SetPrimaryGarden.js":"23","/Users/katydonoghue/Desktop/garden-app/client/src/components/Logout.js":"24","/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionCreators.js":"25","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/authenticated.js":"26","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/garden.js":"27","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/zone.js":"28"},{"size":2997,"mtime":1607801874817,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1607380517237,"results":"31","hashOfConfig":"30"},{"size":1363,"mtime":1607696291789,"results":"32","hashOfConfig":"30"},{"size":2606,"mtime":1607800897490,"results":"33","hashOfConfig":"30"},{"size":3237,"mtime":1607799411113,"results":"34","hashOfConfig":"30"},{"size":184,"mtime":1607447440925,"results":"35","hashOfConfig":"30"},{"size":4061,"mtime":1607794542370,"results":"36","hashOfConfig":"30"},{"size":5325,"mtime":1607723211876,"results":"37","hashOfConfig":"30"},{"size":2576,"mtime":1607801828888,"results":"38","hashOfConfig":"30"},{"size":1798,"mtime":1607800831289,"results":"39","hashOfConfig":"30"},{"size":441,"mtime":1607800137243,"results":"40","hashOfConfig":"30"},{"size":249,"mtime":1607463833760,"results":"41","hashOfConfig":"30"},{"size":587,"mtime":1607463833756,"results":"42","hashOfConfig":"30"},{"size":2969,"mtime":1607801513835,"results":"43","hashOfConfig":"30"},{"size":6488,"mtime":1607801737224,"results":"44","hashOfConfig":"30"},{"size":1039,"mtime":1607794542370,"results":"45","hashOfConfig":"30"},{"size":2508,"mtime":1607802078927,"results":"46","hashOfConfig":"30"},{"size":6228,"mtime":1607794542371,"results":"47","hashOfConfig":"30"},{"size":1941,"mtime":1607797969518,"results":"48","hashOfConfig":"30"},{"size":86,"mtime":1607794542373,"results":"49","hashOfConfig":"30"},{"size":1358,"mtime":1607798816527,"results":"50","hashOfConfig":"30"},{"size":1211,"mtime":1607798930904,"results":"51","hashOfConfig":"30"},{"size":1291,"mtime":1607794542372,"results":"52","hashOfConfig":"30"},{"size":545,"mtime":1607799692363,"results":"53","hashOfConfig":"30"},{"size":1084,"mtime":1607800063788,"results":"54","hashOfConfig":"30"},{"size":370,"mtime":1607800997725,"results":"55","hashOfConfig":"30"},{"size":1135,"mtime":1607801355068,"results":"56","hashOfConfig":"30"},{"size":419,"mtime":1607800875142,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"mtuggw",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/Users/katydonoghue/Desktop/garden-app/client/src/index.js",["127","128"],"/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js",[],["129","130"],"/Users/katydonoghue/Desktop/garden-app/client/src/App.js",["131"],"\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport greenhouse from './components/images/greenhouse.png'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"appContainer\">\n        <div className=\"imageContainer\">\n          <img src={greenhouse} alt=\"greenhouse\" className=\"image\" />\n        </div>\n        <div className=\"textContainer\">\n          <h2>Headline here</h2>\n          <p>lots of copy here</p>\n          <p> and here</p>\n          <p>and here</p>\n          <div className='buttonContainer'>\n            <div className=\"buttonItem\">\n              <Button className=\"button\" variant=\"contained\" color=\"primary\" href=\"/register\"> Sign Up </Button>\n            </div>\n            <div className=\"buttonItem\">\n              <Button className=\"button\" variant=\"contained\" color=\"primary\" href=\"/login\"> LogIn </Button>\n            </div>\n            <div className=\"buttonItem\">\n              <Button className=\"button\" variant=\"contained\" color=\"primary\" href=\"/guides\"> Go to the Guides </Button>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js",["132"],"import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport axios from \"axios\"\nimport * as actionCreators from '../store/actions/actionCreators'\n\nfunction FindZone(props) {\n\n  const [zip, setZip] = useState()\n  const [zone, setZone] = useState([])\n\n  useEffect(() => {\n    fetchZoneInformation(props.setZone)\n\n  }, [props.setZone])\n\n  //  get zone info based on zone id\n  const fetchZoneInformation = (id) => {\n    if (id) {\n      axios.get(`http://localhost:8080/guides/zone-information/${id}`)\n      .then(response => {\n        setZone(response.data)\n      })\n    }\n  }\n\n  //handle on change for entering zip code to get zone\n  const handleOnChange = (e) => {\n    return (\n      setZip({\n        zip: e.target.value\n      })\n    )\n  }\n\n  //validate zip code and handle the save to get the zone number based on zip\n  const handleOnClick = (zip) => {\n    const zipCodeRegex = /^\\d{5}$/\n\n    if (zipCodeRegex.test(zip) == false) {\n      alert(\"Please enter a valid zip code\")\n    } else {\n      fetch(`https://phzmapi.org/${zip}.json`)\n        .then(response => response.json())\n        .then(result => {\n          props.updateZone(result.zone)\n          fetchZoneInformation(result.zone)\n        })\n    }\n  }\n\n  //handle change to have option to update zone\n  const handleOnChangeGuest = () => {\n    props.notGuest()\n  }\n\n  //maps through zone db information\n  let ZoneItem = zone.map(zone => {\n    return <div>\n      <label>Last Frost: {zone.last_frost}</label>\n      <label>First Frost: {zone.first_frost}</label>\n      <label>Avg Extreme Min Temp: {zone.temp}F</label>\n    </div>\n  })\n\n  return (\n    <div className=\"ZoneContainer\">\n      {!props.isGuest ? <div>\n        <h3>Find Your Growing Zone</h3>\n        <p>Enter your zip code to see detailed information about your growing zone</p>\n        <input type=\"text\" placeholder=\"Enter Zip Code\" name=\"zone\" onChange={handleOnChange} />\n        <button onClick={() => handleOnClick(zip.zip)}>Submit</button>\n      </div> : null}\n\n      {props.isGuest ? <div>\n        <p>Your Zone is: {props.setZone} </p>\n        {ZoneItem}\n\n        <button onClick={handleOnChangeGuest}>Change Zones</button>\n      </div> : null}\n\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    setZone: state.zoneReducer.zone,\n    isGuest: state.zoneReducer.isGuest\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateZone: (zone) => dispatch(actionCreators.setZone(zone)),\n    notGuest: () => dispatch(actionCreators.notGuest())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FindZone)","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js",["133","134","135"],"import React, {useState} from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport {TextField, Button} from '@material-ui/core/'\nimport {NavLink} from \"react-router-dom\"\nimport {connect} from \"react-redux\"\nimport * as actionTypes from \"../store/actions/actionTypes\"\nimport axios from \"axios\"\nimport { setAuthenticationHeader} from '../utils/authHeaders'\nimport * as actionCreators from '../store/actions/actionCreators'\n\n//For Material UI\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n})); \n\nfunction Login(props) {\n      //for textboxes & button\n      const classes = useStyles();\n\n    //sets login information proir to sending to db  \n    const [login, setLogin] = useState({})\n\n    //handles chnage events as user inputs login info\n    const handleOnChange = (e) => {\n        setLogin ({\n            ...login,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    //handles log in save to send info to db for verification\n    const handleSubmit = (e) => {\n        if (login.username == '' || login.password == '') {\n            alert(\"Please enter a username and password\")\n        } else {\n        \n        axios.post('http://localhost:8080/login', {\n            data: login         \n        })\n        .then(response => {\n                        \n           const token = response.data.token\n           const zone = response.data.zone\n         \n           if (token) {\n                localStorage.setItem(\"jsonwebtoken\", token)\n                setAuthenticationHeader(token)\n                props.updateZone(zone)\n                props.onLogIn()\n                props.history.push(\"/\")\n            } else {\n                alert(response.data.message)\n           }\n        })\n        }   \n    }\n\n    return(\n        <div className=\"loginContainer\">\n        <h1>Login</h1>\n        <div>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n                id=\"outlined-secondary\"\n                label=\"Username\"\n                variant=\"outlined\"        \n                name=\"username\"\n                color=\"secondary\"\n                onChange={handleOnChange}\n            />\n            </form>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n                id=\"outlined-password-input\"\n                label=\"Password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                variant=\"outlined\"\n                name=\"password\"\n                color=\"secondary\"\n                onChange={handleOnChange}\n                />\n        </form>\n        </div>\n        <div className={classes.root}>\n            <Button variant=\"contained\" color=\"secondary\" onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n        <b><NavLink to = \"/register\">Register For An Account</NavLink></b>\n    </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onLogIn: () => dispatch(actionCreators.loggedIn()),\n        updateZone: (zone) => dispatch(actionCreators.setZone(zone))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Login)","/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js",["136"],"import React, {useState, useEffect} from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Zone from './Zone'\nimport './css/guides.css'\nimport axios from \"axios\";\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }));\n\nfunction Guides(props) {\n\n    //for material ui select\n    const classes = useStyles();\n    \n    const [plant, setPlant] = useState(\"1\")\n    const [guides, setGuides] = useState([])\n    \n    \n    useEffect(() => {\n        fetchGuide(plant)\n    }, [plant])\n \n    //fetch plants from db based on plant id\n    const fetchGuide = (id) => {\n        axios.get(`http://localhost:8080/guides/${id}`)\n        .then(response => {\n            setGuides(response.data)\n        })\n    }\n\n    //map through guides to set layout\n    const guideItem = guides.map(guide => {\n        return <div key={guide.id} className=\"guide\"><b>{guide.vegetable}</b>\n            <div><img src={`./images/${guide.vegetable}.jpeg`}/></div>\n            <label>{guide.description}</label>\n            <label>{guide.description_two}</label>\n            <label>{guide.description_three}</label>\n            <label><b>Days to Maturity:</b> {guide.days_maturity}</label>\n            <label><b>Sow Method:</b> {guide.sow_method}</label>\n            <label><b>Sow Time:</b> {guide.sow_time}</label>\n            <label><b>Plant Spacing:</b> {guide.seed_spacing}</label>\n            <label><b>Spread:</b> {guide.spread}\"</label>\n            <label><b>Height:</b> {guide.height}\"</label>\n            <label><b>Sun Requirements:</b> {guide.sun_req}</label>\n            <label><b>Water Requirements:</b> {guide.water_req}\" per week</label>\n            </div>\n    })\n\n    const handleChange = (event) => {        \n        setPlant(event.target.value)\n    };\n\n    return (\n        <div>\n            <h1>Growing Guides</h1>\n            <div>\n             <Zone/>         \n            </div>\n\n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">Vegetable</InputLabel>\n                <Select onChange={handleChange} labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={plant} >\n                    <MenuItem value=\"1\">Beans</MenuItem>\n                    <MenuItem value=\"2\">Beets</MenuItem>\n                    <MenuItem value=\"3\">Broccoli</MenuItem>\n                    <MenuItem value=\"4\">Cabbage</MenuItem>\n                    <MenuItem value=\"5\">Carrots</MenuItem>\n                    <MenuItem value=\"6\">Cauliflower</MenuItem>\n                    {/* <MenuItem value=\"7\">Celery</MenuItem> */}\n                    <MenuItem value=\"8\">Corn</MenuItem>\n                    {/* <MenuItem value=\"9\">Cowpeas</MenuItem> */}\n                    <MenuItem value=\"10\">Cucumbers</MenuItem>\n                    <MenuItem value=\"11\">Eggplant</MenuItem>\n                    <MenuItem value=\"13\">Greens</MenuItem>\n                    <MenuItem value=\"14\">Leeks</MenuItem>\n                    <MenuItem value=\"15\">Melons</MenuItem>\n                    <MenuItem value=\"16\">Okra</MenuItem>        \n                    <MenuItem value=\"20\">Peas</MenuItem>\n                    <MenuItem value=\"21\">Peppers</MenuItem>\n                    <MenuItem value=\"22\">Potatoes</MenuItem>\n                    {/* <MenuItem value=\"24\">Summer Squash</MenuItem> */}\n                    {/* <MenuItem value=\"25\">Winter Squash</MenuItem> */}\n                    {/* <MenuItem value=\"26\">Sweet Potatoes</MenuItem> */}\n                    <MenuItem value=\"28\">Tomatoes</MenuItem>        \n                </Select>\n            </FormControl>\n        <div>        \n            {guideItem}    \n        </div>\n    \n        </div>\n    )\n}\n\nexport default Guides","/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js",["137","138","139"],"import React, { useState } from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { TextField, Button } from '@material-ui/core/'\nimport Select from '@material-ui/core/Select';\nimport { NavLink } from \"react-router-dom\"\nimport axios from 'axios'\n\n//For Material UI\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\n\nfunction Register(props) {\n\n    //for textboxes & button\n    const classes = useStyles();\n\n    // sets registration information prior to sending to db\n    const [register, setRegister] = useState({ username: '', password: '', zone: '' })\n\n    //handles on change event to user input for reg information\n    const handleOnChange = (e) => {\n        setRegister({\n            ...register,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    //need to ensure all fields are filled out\n\n    //handles the save - sending info to database to create user\n    const handleSubmit = (e) => {\n        if (register.username == '' || register.password == '' || register.zone == '') {\n            alert(\"you must enter a username, password, and growing zone to create an account\")\n        } else {\n            axios.post('http://localhost:8080/register', {\n                data: register\n            }).then(response => {\n                console.log(response)\n                let success = response.data.success\n                if (success) {\n                    props.history.push('/login')\n                } else {\n                    alert(response.data.message)\n                }\n            })\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"loginContainer\">\n                <h1>Register</h1>\n                <div>\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <TextField\n                            id=\"outlined-secondary\"\n                            label=\"Username\"\n                            variant=\"outlined\"\n                            name=\"username\"\n                            onChange={handleOnChange}\n                        />\n                    </form>\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <TextField\n                            id=\"outlined-password-input\"\n                            label=\"Password\"\n                            type=\"password\"\n                            autoComplete=\"current-password\"\n                            variant=\"outlined\"\n                            name=\"password\"\n                            onChange={handleOnChange}\n                        />\n                    </form>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-outlined-label\">Zone</InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label\"\n                            id=\"demo-simple-select-outlined\"\n                            name=\"zone\"\n                            onChange={handleOnChange}\n                            label=\"Zone\"\n                        >\n                            <MenuItem value=\"1a\">1a</MenuItem>\n                            <MenuItem value=\"1b\">1b</MenuItem>\n                            <MenuItem value=\"2a\">2a</MenuItem>\n                            <MenuItem value=\"2b\">2b</MenuItem>\n                            <MenuItem value=\"3a\">3a</MenuItem>\n                            <MenuItem value=\"3b\">3b</MenuItem>\n                            <MenuItem value=\"4a\">4a</MenuItem>\n                            <MenuItem value=\"4b\">4b</MenuItem>\n                            <MenuItem value=\"5a\">5a</MenuItem>\n                            <MenuItem value=\"5b\">5b</MenuItem>\n                            <MenuItem value=\"6a\">6a</MenuItem>\n                            <MenuItem value=\"6b\">6b</MenuItem>\n                            <MenuItem value=\"7a\">7a</MenuItem>\n                            <MenuItem value=\"7b\">7b</MenuItem>\n                            <MenuItem value=\"8a\">8a</MenuItem>\n                            <MenuItem value=\"8b\">8b</MenuItem>\n                            <MenuItem value=\"9a\">9a</MenuItem>\n                            <MenuItem value=\"9b\">9b</MenuItem>\n                            <MenuItem value=\"10a\">10a</MenuItem>\n                            <MenuItem value=\"10b\">10b</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <div>\n                        <b><NavLink to=\"/zone\"> Don't know your zone? Find it here</NavLink></b>\n                    </div>\n                </div>\n                <div className={classes.root}>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n                        Submit\n            </Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Register","/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducer.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js",["140"],"import React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nexport default function(ComposedComponent) {\n\n    class Authenticate extends Component {\n        constructor(props) {\n            super(props)\n\n            if (!this.props.isAuth) {\n                this.props.history.push('/login')\n            }\n        }\n        render() {\n            return <ComposedComponent {...this.props} />\n        }\n    }   \n\n    const mapStateToProps = (state) => {\n        return {\n            isAuth: state.isAuth\n        }\n    }\n\n    return connect(mapStateToProps)(Authenticate)\n}","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js",["141","142"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport axios from 'axios'\nimport { DataGrid } from '@material-ui/data-grid';\nimport Button from '@material-ui/core/Button';\nimport { NavLink } from \"react-router-dom\";\nimport history from '.././utils/history'\nimport DeleteGarden from './DeleteGarden';\nimport SetPrimaryGarden from './SetPrimaryGarden';\n\nfunction GardenTable(props) {\n\n    //sets plants for use in rows\n    const [plants, setPlants] = useState([])\n\n    //sets columns\n    const column = [\n        { field: 'id', hide: true },\n        { field: 'plant_name', headerName: 'Vegetable' },\n        { field: 'quantity', headerName: 'Quantity' },\n        { field: 'type', headerName: 'Started As' },\n        { field: 'sow_date', headerName: 'Sow Date', description: 'The date you planted your seeds' },\n        { field: 'planting_date', headerName: 'Planting Date', description: 'The date you planted the plant in the garden' },\n        { field: 'first_harvest', headerName: 'First Harvest', description: 'The date of the first harvest' },\n        { field: 'last_harvest', headerName: 'Last Harvest', description: 'The date of the last harvest' },\n        { field: 'company', headerName: 'Company' },\n        { field: 'notes', headerName: 'Notes' }]\n\n\n    useEffect(() => {\n        //gets plants in primary garden (in global state) updated when choose garden componet updates primary garden in redux\n        fetchGarden(props.displayGarden)\n    }, [props.displayGarden])\n\n\n    //gets plants by garden id \n    const fetchGarden = (id) => {\n        axios.get(`http://localhost:8080/garden/${id}`)\n            .then(response => {\n                setPlants(response.data)\n            })\n    }\n      \n    return (\n\n        <div>\n            <h2>{props.displayGardenName}</h2> \n            {props.displayGarden ? <DeleteGarden id={props.displayGarden}/> : null}\n            {props.displayGarden ? <SetPrimaryGarden id={props.displayGarden} name={props.displayGardenName}/> : null}\n            <div>\n                {props.displayGarden ? <b><NavLink to=\"/add-plant\"><button>Add Plant</button></NavLink></b> : null}\n            </div>\n            <div style={{ height: 250, width: '100%' }}>\n                <DataGrid\n                    columns={column}\n                    rows={plants}\n                    onSelectionChange={(newSelection) => {\n                        //history.push(`/detail/${newSelection.rowIds[0]}`)\n                        window.location.href = (`/detail/${newSelection.rowIds[0]}`)\n                       \n                    }}\n                />\n            </div>\n        </div>\n\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        // this is the garden id:\n        displayGarden: state.gardenReducer.primary_garden,\n\n        //this is the garden name:\n        displayGardenName: state.gardenReducer.primary_garden_name,\n    }\n}\n\nexport default connect(mapStateToProps)(GardenTable)","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js",["143","144"],"import React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport axios from \"axios\";\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\n\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n}));\n\n\nfunction AddPlant(props) {\n  //for material ui select\n  const classes = useStyles();\n\n  const [newPlant, setNewPlant] = useState({garden_id: props.displayGardenID,\n    plant_name: ''})\n\n  // garden id to plant info onload\n  // useEffect(() => {\n  //   setNewPlant({\n  //     ...newPlant,\n  //     garden_id: props.displayGardenID,\n  //     plant_name: ''\n  //   })\n  // }, [])\n\n  //update local state with information\n  const handleOnChange = (e) => {\n    setNewPlant({\n      ...newPlant,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  // handle change to sow date\n  const handleSowChange = (date) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setNewPlant({\n      ...newPlant,\n      sow_date: date\n    })\n  };\n\n  // handle change to planting date\n  const handlePlantingChange = (date) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setNewPlant({\n      ...newPlant,\n      planting_date: date\n    })\n  };\n\n  //save new plant to db\n  const onSaveToGarden = (plant) => {\n    if (newPlant.plant_name == '') {\n      alert('You must enter a plant variety')\n    } else {\n      axios.post('http://localhost:8080/garden/save-new',\n        {\n          data: newPlant\n        })\n        .then(response => {\n\n          let success = response.data.success\n\n          if (success) {\n            props.history.push('/garden')\n          } else {\n            console.log(\"did not update\")\n          }\n        })\n    }\n  }\n\n  return (\n    <div>\n      <p>Add Plant</p>\n      <div>\n        <TextField onChange={handleOnChange} name=\"plant_name\" value={newPlant.plant_name} id=\"standard-search\" label=\"Variety\" type=\"text\" />\n      </div>\n      <div>\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"demo-simple-select-label\">Family</InputLabel>\n          <Select onChange={handleOnChange} labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" name=\"plant_family\" value={newPlant.plant_family} >\n            <MenuItem value=\"beans\">Beans</MenuItem>\n            <MenuItem value=\"beets\">Beets</MenuItem>\n            <MenuItem value=\"broccoli\">Broccoli</MenuItem>\n            <MenuItem value=\"cabbage\">Cabbage</MenuItem>\n            <MenuItem value=\"carrots\">Carrots</MenuItem>\n            <MenuItem value=\"cauliflower\">Cauliflower</MenuItem>\n            <MenuItem value=\"celery\">Celery</MenuItem>\n            <MenuItem value=\"corn\">Corn</MenuItem>\n            <MenuItem value=\"cowpeas\">Cowpeas</MenuItem>\n            <MenuItem value=\"cucumbers\">Cucumbers</MenuItem>\n            <MenuItem value=\"eggplant\">Eggplant</MenuItem>\n            <MenuItem value=\"greens\">Greens</MenuItem>\n            <MenuItem value=\"leeks\">Leeks</MenuItem>\n            <MenuItem value=\"melons\">Melons</MenuItem>\n            <MenuItem value=\"okra\">Okra</MenuItem>\n            <MenuItem value=\"peanuts\">Peanuts</MenuItem>\n            <MenuItem value=\"peas\">Peas</MenuItem>\n            <MenuItem value=\"peppers\">Peppers</MenuItem>\n            <MenuItem value=\"potatoes\">Potatoes</MenuItem>\n            <MenuItem value=\"summer squash\">Summer Squash</MenuItem>\n            <MenuItem value=\"winter squash\">Winter Squash</MenuItem>\n            <MenuItem value=\"sweet potatoes\">Sweet Potatoes</MenuItem>\n            <MenuItem value=\"tomatoes\">Tomatoes</MenuItem>\n          </Select>\n        </FormControl>\n        <TextField onChange={handleOnChange} name=\"quantity\" value={newPlant.quantity} id=\"standard-search\" label=\"Quantity\" type=\"text\" />\n        <TextField onChange={handleOnChange} name=\"company\" id=\"standard-search\" label=\"Company\" type=\"text\" value={newPlant.company} />\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"demo-simple-select-label\">Start From</InputLabel>\n          <Select onChange={handleOnChange} labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" name=\"type\" value={newPlant.type} >\n            <MenuItem value=\"seed\">Seed</MenuItem>\n            <MenuItem value=\"plant\">Plant</MenuItem>\n            <MenuItem value=\"sets\">Sets</MenuItem>\n            <MenuItem value=\"slips\">Slips</MenuItem>\n          </Select>\n        </FormControl>\n\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Grid container justify=\"space-around\">\n            <KeyboardDatePicker\n              margin=\"normal\"\n              id=\"date-picker-dialog\"\n              label=\"Sow Date\"\n              format=\"MM/dd/yyyy\"\n              name=\"sow_date\"\n              value={newPlant.sow_date}\n              onChange={handleSowChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n            />\n          </Grid>\n        </MuiPickersUtilsProvider>\n\n\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Grid container justify=\"space-around\">\n            <KeyboardDatePicker\n              margin=\"normal\"\n              id=\"date-picker-dialog\"\n              label=\"Plant Outside\"\n              format=\"MM/dd/yyyy\"\n              name=\"planting_date\"\n              value={newPlant.planting_date}\n              onChange={handlePlantingChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n            />\n          </Grid>\n        </MuiPickersUtilsProvider>\n      </div>\n      <div>\n        <button onClick={() => onSaveToGarden(newPlant)}>Save</button>\n      </div>\n    </div>\n\n\n  );\n}\n\nconst mapStatesToProps = (state) => {\n  return {\n    displayGardenID: state.gardenReducer.primary_garden\n  }\n}\n\nexport default connect(mapStatesToProps)(AddPlant)","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js",["145"],"import GardenTable from './GardenTable'\nimport ChooseGarden from './ChooseGarden'\nimport AddGarden from './AddGarden'\nimport {connect} from 'react-redux'\nimport axios from 'axios'\nimport { useEffect } from 'react'\n\n\nfunction DisplayGarden(props) {\n\n    useEffect(() => {\n        fetchPrimaryGarden()\n    }, [])\n\n    const fetchPrimaryGarden = () => {\n    // axios.get('http://localhost:8080/garden/fetch-primary')\n    // .then(response => {\n    //     console.log(response)\n    //     // let name = response.data.primary.garden_name\n    //     // let value = response.data.primary.garden_id\n\n    //     // props.onSetGardenDefault({garden_name: name, garden_id: value})\n    // })\n\n    }\n\n    return(\n        <div>\n            <ChooseGarden />\n            <AddGarden />\n            <GardenTable />\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSetGardenDefault: (garden) => dispatch({type: 'SET_GARDEN', payload: garden}),\n    }\n} \n\nexport default connect(null, mapDispatchToProps)(DisplayGarden)","/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js",["146","147","148"],"import { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DeletePlant from \"./DeletePlant\";\nimport history from '.././utils/history'\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n}));\n\n\nfunction PlantDetails(props) {\n  //for material ui select\n  const classes = useStyles();\n\n  const [plantDetails, setPlantDetails] = useState([])\n  let id = props.match.params.id\n\n  useEffect(() => {\n    let id = props.match.params.id\n    fetchPlantDetails(id)\n\n  }, [])\n\n  const fetchPlantDetails = (id) => {\n    axios.get(`http://localhost:8080/garden/plant/${id}`)\n      .then(response => {\n        setPlantDetails(response.data[0])\n      })\n\n  }\n\n  const handleOnChange = (e) => {\n    setPlantDetails({\n      ...plantDetails,\n      [e.target.name]: e.target.value\n    })\n\n  }\n\n    // handle change to sow date\n    const handleSowChange = (date) => {\n      date.setDate(date.getDate())\n      console.log(date)\n      setPlantDetails({\n        ...plantDetails,\n        sow_date: date\n      })\n    };\n\n  // handle change to planting date\n  const handlePlantingChange = (date) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setPlantDetails({\n      ...plantDetails,\n      planting_date: date\n    })\n  };\n\n  // handle change to first harvest date\n  const handleFirstHarvestChange = (date) => {\n    date.setDate(date.getDate())\n       setPlantDetails({\n      ...plantDetails,\n      first_harvest: date\n    })\n  };\n\n  // handle change to last harvest date\n  const handleLastHarvestChange = (date, e) => {\n    date.setDate(date.getDate())\n      setPlantDetails({\n      ...plantDetails,\n      last_harvest: date\n    })\n  };\n\n  const handleSave = () => {\n    axios.post('http://localhost:8080/garden/save-edit',\n      {\n        data: plantDetails\n      })\n      .then(response => {\n\n        let success = response.data.success\n\n        if (success) {\n          props.history.push('/garden')\n        } else {\n          console.log(\"did not update\")\n        }\n      })\n  }\n\n  // const handleDelete = () => {\n  //   let id = props.match.params.id\n  //   axios.delete(`http://localhost:8080/garden/delete-plant/${id}`)\n  //     .then(response => {\n\n  //       let success = response.data.success\n\n  //       if (success) {\n  //         props.history.push('/garden')\n  //       } else {\n  //         console.log(\"did not update\")\n  //       }\n  //     })\n  // }\n\n  return (\n    <div>\n      <p>Plant Details</p>\n\n      <label> Plant: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.plant_name} name=\"plant_name\" type=\"text\" /> </label>\n      <label> Plant Family: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.plant_family} name=\"plant_family\" type=\"text\" /> </label>\n      <label> Start From: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.type} name=\"type\" type=\"text\" /> </label>\n      <label> Quantity: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.quantity} name=\"quantity\" type=\"text\" /> </label>\n      <label> Supplier: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.company} name=\"company\" type=\"text\" /> </label>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Sow Date\"\n            format=\"MM/dd/yyyy\"\n            name=\"sow_date\"\n            value={plantDetails.sow_date}\n            onChange={handleSowChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Plant Outside\"\n            format=\"MM/dd/yyyy\"\n            name=\"planting_date\"\n            value={plantDetails.planting_date}\n            onChange={handlePlantingChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"First Harvest\"\n            format=\"MM/dd/yyyy\"\n            name=\"first_harvest\"\n            value={plantDetails.first_harvest}\n            onChange={handleFirstHarvestChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Last Harvest\"\n            format=\"MM/dd/yyyy\"\n            name=\"last_harvest\"\n            value={plantDetails.last_harvest}\n            onChange={handleLastHarvestChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <label> Notes: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.notes} name=\"notes\" type=\"text\" /> </label>\n\n      <button onClick={handleSave}>Save Changes</button>\n\n      {/* <button onClick={handleDelete}>Delete</button> */}\n      <DeletePlant id={id} />\n\n    </div>\n  )\n}\n\nexport default PlantDetails","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddGarden.js",["149","150","151"],"import { useState } from 'react'\nimport axios from 'axios'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux'\nimport * as actionTypes from '../store/actions/actionTypes'\nimport * as actionCreators from '../store/actions/actionCreators'\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n}));\n\nfunction AddGarden(props) {\n  //for material ui select\n  const classes = useStyles();\n\n  const [name, setName] = useState({})\n\n  const saveNewGarden = () => {\n    if (name.garden_name == '') {\n      alert(\"Please enter the name of your garden\")\n    } else {\n      axios.post('http://localhost:8080/garden/new-garden',\n        {\n          data: name\n        })\n        .then(response => {\n\n          let success = response.data.success\n\n          if (success) {\n            //reload display gardens        \n            props.updateDisplayGarden(name)      \n            setName({\n              ...name,\n              garden_name: ''\n            })\n          } else {\n            console.log(\"did not update\")\n          }\n        })\n    }\n  }\n\n  const handleOnChange = (e) => {\n    setName({\n      ...name,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  return (\n    <div>\n      <p>create a new garden</p>\n      <TextField onChange={handleOnChange} name=\"garden_name\" value={name.garden_name} id=\"standard-search\" label=\"Garden Name\" type=\"text\" />\n      <button onClick={saveNewGarden}>Save</button>\n      \n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateDisplayGarden: (name) => dispatch(actionCreators.updateDisplay(name))\n  }\n\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddGarden)","/Users/katydonoghue/Desktop/garden-app/client/src/utils/history.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/DeleteGarden.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/DeletePlant.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/SetPrimaryGarden.js",["152","153","154"],"import axios from \"axios\";\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\n\n//for material ui\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n  }));\n  \n\nfunction setPrimaryGarden(props) {\n\n    // //for material ui\n    // const classes = useStyles();\n\n    const updatePrimaryGarden = (id, name) => {\n\n        console.log(id)\n        axios.post('http://localhost:8080/garden/set-primary', {\n            data: {\n                garden_id: id,\n                garden_name: name\n            }\n        }).then(response => {\n            if (response.data.success) {\n                alert(\"Your primary garden has been set\")\n            } else {\n                alert(\"Your primary garden did not save\")\n            }\n        })\n\n    }\n\n    return (\n        <div>\n        {/* <IconButton onClick={() => updatePrimaryGarden(props.id, props.name)} aria-label=\"delete\" disabled color=\"primary\">\n            <FavoriteIcon />\n        </IconButton> */}\n        <button onClick={() => updatePrimaryGarden(props.id, props.name)}>Set Primary Garden</button>\n        </div>\n    )\n\n}\n\n\n\nexport default setPrimaryGarden","/Users/katydonoghue/Desktop/garden-app/client/src/components/Logout.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionCreators.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/authenticated.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/garden.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/zone.js",[],{"ruleId":"155","severity":1,"message":"156","line":9,"column":8,"nodeType":"157","messageId":"158","endLine":9,"endColumn":15},{"ruleId":"155","severity":1,"message":"159","line":19,"column":8,"nodeType":"157","messageId":"158","endLine":19,"endColumn":19},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"155","severity":1,"message":"164","line":16,"column":9,"nodeType":"157","messageId":"158","endLine":16,"endColumn":16},{"ruleId":"165","severity":1,"message":"166","line":39,"column":32,"nodeType":"167","messageId":"168","endLine":39,"endColumn":34},{"ruleId":"155","severity":1,"message":"169","line":6,"column":13,"nodeType":"157","messageId":"158","endLine":6,"endColumn":24},{"ruleId":"165","severity":1,"message":"166","line":38,"column":28,"nodeType":"167","messageId":"168","endLine":38,"endColumn":30},{"ruleId":"165","severity":1,"message":"166","line":38,"column":52,"nodeType":"167","messageId":"168","endLine":38,"endColumn":54},{"ruleId":"170","severity":1,"message":"171","line":46,"column":18,"nodeType":"172","endLine":46,"endColumn":65},{"ruleId":"165","severity":1,"message":"166","line":49,"column":31,"nodeType":"167","messageId":"168","endLine":49,"endColumn":33},{"ruleId":"165","severity":1,"message":"166","line":49,"column":58,"nodeType":"167","messageId":"168","endLine":49,"endColumn":60},{"ruleId":"165","severity":1,"message":"166","line":49,"column":81,"nodeType":"167","messageId":"168","endLine":49,"endColumn":83},{"ruleId":"173","severity":1,"message":"174","line":4,"column":1,"nodeType":"175","endLine":26,"endColumn":2},{"ruleId":"155","severity":1,"message":"176","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":14},{"ruleId":"155","severity":1,"message":"177","line":7,"column":8,"nodeType":"157","messageId":"158","endLine":7,"endColumn":15},{"ruleId":"155","severity":1,"message":"178","line":1,"column":27,"nodeType":"157","messageId":"158","endLine":1,"endColumn":36},{"ruleId":"165","severity":1,"message":"166","line":82,"column":29,"nodeType":"167","messageId":"168","endLine":82,"endColumn":31},{"ruleId":"155","severity":1,"message":"179","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":13},{"ruleId":"155","severity":1,"message":"177","line":10,"column":8,"nodeType":"157","messageId":"158","endLine":10,"endColumn":15},{"ruleId":"155","severity":1,"message":"164","line":33,"column":9,"nodeType":"157","messageId":"158","endLine":33,"endColumn":16},{"ruleId":"180","severity":1,"message":"181","line":42,"column":6,"nodeType":"182","endLine":42,"endColumn":8,"suggestions":"183"},{"ruleId":"155","severity":1,"message":"169","line":6,"column":13,"nodeType":"157","messageId":"158","endLine":6,"endColumn":24},{"ruleId":"155","severity":1,"message":"164","line":27,"column":9,"nodeType":"157","messageId":"158","endLine":27,"endColumn":16},{"ruleId":"165","severity":1,"message":"166","line":32,"column":26,"nodeType":"167","messageId":"168","endLine":32,"endColumn":28},{"ruleId":"155","severity":1,"message":"184","line":2,"column":8,"nodeType":"157","messageId":"158","endLine":2,"endColumn":20},{"ruleId":"155","severity":1,"message":"185","line":4,"column":8,"nodeType":"157","messageId":"158","endLine":4,"endColumn":18},{"ruleId":"155","severity":1,"message":"186","line":7,"column":7,"nodeType":"157","messageId":"158","endLine":7,"endColumn":16},"no-unused-vars","'reducer' is defined but never used.","Identifier","unusedVar","'requireAuth' is defined but never used.","no-native-reassign",["187"],"no-negated-in-lhs",["188"],"'classes' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'actionTypes' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Button' is defined but never used.","'history' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["189"],"'FavoriteIcon' is defined but never used.","'IconButton' is defined but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"190","fix":"191"},"Update the dependencies array to be: [props.match.params.id]",{"range":"192","text":"193"},[1025,1027],"[props.match.params.id]"]