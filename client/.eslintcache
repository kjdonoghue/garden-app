[{"/Users/katydonoghue/Desktop/garden-app/client/src/index.js":"1","/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js":"2","/Users/katydonoghue/Desktop/garden-app/client/src/App.js":"3","/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js":"4","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js":"5","/Users/katydonoghue/Desktop/garden-app/client/src/components/Tasks.js":"6","/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js":"7","/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js":"8","/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js":"9","/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js":"10","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducer.js":"11","/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js":"12","/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js":"13","/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js":"14","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js":"15","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js":"16","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js":"17","/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js":"18","/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js":"19","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddGarden.js":"20","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddTasks.js":"21","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayTasks.js":"22","/Users/katydonoghue/Desktop/garden-app/client/src/components/EditTask.js":"23","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGardenName.js":"24"},{"size":3020,"mtime":1607626020574,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1607380517237,"results":"27","hashOfConfig":"26"},{"size":1363,"mtime":1607696291789,"results":"28","hashOfConfig":"26"},{"size":2407,"mtime":1607696291792,"results":"29","hashOfConfig":"26"},{"size":3093,"mtime":1607697474196,"results":"30","hashOfConfig":"26"},{"size":241,"mtime":1607620156496,"results":"31","hashOfConfig":"26"},{"size":184,"mtime":1607447440925,"results":"32","hashOfConfig":"26"},{"size":4140,"mtime":1607696291791,"results":"33","hashOfConfig":"26"},{"size":4408,"mtime":1607697212100,"results":"34","hashOfConfig":"26"},{"size":1135,"mtime":1607696291792,"results":"35","hashOfConfig":"26"},{"size":1008,"mtime":1607696291800,"results":"36","hashOfConfig":"26"},{"size":37,"mtime":1607463833758,"results":"37","hashOfConfig":"26"},{"size":249,"mtime":1607463833760,"results":"38","hashOfConfig":"26"},{"size":587,"mtime":1607463833756,"results":"39","hashOfConfig":"26"},{"size":2019,"mtime":1607696291791,"results":"40","hashOfConfig":"26"},{"size":5638,"mtime":1607696291789,"results":"41","hashOfConfig":"26"},{"size":425,"mtime":1607699998254,"results":"42","hashOfConfig":"26"},{"size":3416,"mtime":1607696291790,"results":"43","hashOfConfig":"26"},{"size":5191,"mtime":1607609974001,"results":"44","hashOfConfig":"26"},{"size":1849,"mtime":1607696291789,"results":"45","hashOfConfig":"26"},{"size":3236,"mtime":1607614241019,"results":"46","hashOfConfig":"26"},{"size":5129,"mtime":1607696291791,"results":"47","hashOfConfig":"26"},{"size":3339,"mtime":1607626020574,"results":"48","hashOfConfig":"26"},{"size":608,"mtime":1607696291790,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},"mtuggw",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"53"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"53"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"53"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/katydonoghue/Desktop/garden-app/client/src/index.js",["104"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport {createStore} from \"redux\"\nimport {Provider} from \"react-redux\"\nimport reducer from './store/reducer'\nimport BaseLayout from './components/BaseLayout';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport DisplayGarden from './components/DisplayGarden';\nimport AddGarden from './components/AddGarden'\nimport Guides from './components/Guides';\nimport Tasks from './components/Tasks';\nimport Zone from './components/Zone';\nimport PlantDetails from './components/PlantDetails'\nimport {setAuthenticationHeader} from './utils/authHeaders'\nimport requireAuth from './components/requireAuth'\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\"\nimport EditTasks from './components/EditTask';\n\n//change material ui colors\nconst theme = createMuiTheme({\n  palette: {\n     primary: {\n        main: \"#434c23\" // dark green\n               },\n     secondary: {\n        main: \"#ca912f\" //yellow\n                }\n           },\n//fontFamily: font // as an aside, highly recommend importing roboto font for Material UI projects! Looks really nice\n});\n\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n//get token from local storage\nconst token = localStorage.getItem('jsonwebtoken')\n\n//set header for axios\nsetAuthenticationHeader(token)\n\n// keep user logged in even if restart\n// if(token) {\n//   store.dispatch({\n//     type: 'LOGGED_IN'\n//   })\n// }\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <Switch>\n        <ThemeProvider theme={theme}>\n          <BaseLayout>\n            <Route component = {Register} path='/register' />\n            <Route component = {Login} path='/login' />\n            <Route component = {App} path='/' exact />\n            <Route component = {Guides} path='/guides' />\n            {/* <Route component = {requireAuth(DisplayGarden)} path='/garden' /> */}\n            <Route component = {DisplayGarden} path='/garden' />\n            <Route component = {AddGarden} path='/add-garden' />\n            {/* <Route component = {requireAuth(Tasks)} path='/tasks' /> */}\n            <Route component = {PlantDetails} path='/plant/:id' />\n            <Route component = {Tasks} path='/tasks' />\n            <Route component = {EditTasks} path='/edit-tasks/:id' />\n            <Route component = {Zone} path='/zone' />\n          </BaseLayout>\n          </ThemeProvider>\n        </Switch>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["105","106"],"/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/App.js",["107"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Tasks.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducer.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js",["108"],"import React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nexport default function(ComposedComponent) {\n\n    class Authenticate extends Component {\n        constructor(props) {\n            super(props)\n\n            if (!this.props.isAuth) {\n                this.props.history.push('/login')\n            }\n        }\n        render() {\n            return <ComposedComponent {...this.props} />\n        }\n    }   \n\n    const mapStateToProps = (state) => {\n        return {\n            isAuth: state.isAuth\n        }\n    }\n\n    return connect(mapStateToProps)(Authenticate)\n}","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js",["109"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js",["110","111"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js",["112"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js",["113","114"],"import { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n}));\n\n\nfunction PlantDetails(props) {\n  //for material ui select\n  const classes = useStyles();\n\n  const [plantDetails, setPlantDetails] = useState([])\n\n  useEffect(() => {\n    let id = props.match.params.id\n    fetchPlantDetails(id)\n\n  }, [])\n\n  const fetchPlantDetails = (id) => {\n    axios.get(`http://localhost:8080/garden/plant/${id}`)\n      .then(response => {\n        setPlantDetails(response.data[0])\n      })\n\n  }\n\n  const handleOnChange = (e) => {\n    setPlantDetails({\n      ...plantDetails,\n      [e.target.name]: e.target.value\n    })\n\n  }\n\n  //   // handle change to planting date\n  const handlePlantingChange = (date) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setPlantDetails({\n      ...plantDetails,\n      planting_date: date\n    })\n  };\n\n  // handle change to first harvest date\n  const handleFirstHarvestChange = (date) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setPlantDetails({\n      ...plantDetails,\n      first_harvest: date\n    })\n  };\n\n  // handle change to last harvest date\n  const handleLastHarvestChange = (date, e) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setPlantDetails({\n      ...plantDetails,\n      last_harvest: date\n    })\n  };\n\n  const handleSave = () => {\n    axios.post('http://localhost:8080/garden/save-edit',\n      {\n        data: plantDetails\n      })\n      .then(response => {\n\n        let success = response.data.success\n\n        if (success) {\n          props.history.push('/garden')\n        } else {\n          console.log(\"did not update\")\n        }\n      })\n  }\n\n  const handleDelete = () => {\n    let id = props.match.params.id\n    axios.delete(`http://localhost:8080/garden/delete-plant/${id}`)\n      .then(response => {\n\n        let success = response.data.success\n\n        if (success) {\n          props.history.push('/garden')\n        } else {\n          console.log(\"did not update\")\n        }\n      })\n  }\n\n  return (\n    <div>\n      <p>Plant Details</p>\n\n      <label> Plant: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.plant_name} name=\"plant_name\" type=\"text\" /> </label>\n      <label> Plant Family: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.plant_family} name=\"plant_family\" type=\"text\" /> </label>\n      <label> Start From: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.type} name=\"company\" type=\"text\" /> </label>\n      <label> Supplier: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.company} name=\"company\" type=\"text\" /> </label>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Plant Outside\"\n            format=\"MM/dd/yyyy\"\n            name=\"planting_date\"\n            value={plantDetails.planting_date}\n            onChange={handlePlantingChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"First Harvest\"\n            format=\"MM/dd/yyyy\"\n            name=\"first_harvest\"\n            value={plantDetails.first_harvest}\n            onChange={handleFirstHarvestChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Last Harvest\"\n            format=\"MM/dd/yyyy\"\n            name=\"last_harvest\"\n            value={plantDetails.last_harvest}\n            onChange={handleLastHarvestChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <label> Notes: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.notes} name=\"notes\" type=\"text\" /> </label>\n\n      <button onClick={handleSave}>Save Changes</button>\n\n      <button onClick={handleDelete}>Delete</button>\n\n    </div>\n  )\n}\n\nexport default PlantDetails","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddGarden.js",["115"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/AddTasks.js",["116"],"import React, { useState } from \"react\";\n// import {connect} from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\n// import InputLabel from '@material-ui/core/InputLabel';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import FormControl from '@material-ui/core/FormControl';\n// import Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport axios from \"axios\";\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n  }));\n\n\nfunction AddTasks(props) {\n    //for material ui select\n    const classes = useStyles();\n\n    const [task, setTask] = useState({})\n\n     \n    //update with information\n    const handleOnChange = (e) => {\n        setTask({...task,\n          [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSetDate = (date) => {\n        date.setDate(date.getDate())\n        console.log(date)\n        setTask({\n          ...task,\n            task_date: date\n        })\n      };\n\n    const onSaveTasks= (task) => {\n      axios.post('http://localhost:8080/tasks/add-task',\n        {\n          data: task\n        })\n        .then(response => {let success = response.data.success\n\n          if (success) {\n           \n           console.log(\"Success\") \n           setTask({\n               task_name: '',\n               task_description: ''      \n            })\n          } else {\n              console.log(\"did not update\")\n              }\n          })    \n    }\n\n    \n\n      return (\n        <div>\n            <p>Add Task</p>\n            <div>\n            <TextField onChange={handleOnChange} name=\"task_name\" value={task.task_name} id=\"standard-search\" label=\"Task\" type=\"text\" />\n            </div>\n            <div>                 \n            <TextField onChange={handleOnChange} name=\"task_description\" value={task.task_description} id=\"standard-textarea\" label=\"Description\" placeholder=\"Description\" multiline />\n            </div>\n            <div>                  \n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Date\"\n                    format=\"MM/dd/yyyy\"\n                    name=\"task_date\"\n                    value={task.task_date}\n                    onChange={handleSetDate}\n                    KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                    }}\n                />\n                </Grid>\n            </MuiPickersUtilsProvider>\n            </div>\n              <div>\n                <button onClick={() => onSaveTasks(task)}>Save</button>\n              </div>          \n        </div>\n\n        \n    );\n} \n\n\nexport default AddTasks","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayTasks.js",["117"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/EditTask.js",["118","119"],"import { useEffect, useState } from \"react\"\nimport axios from 'axios'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    }\n    }));\n  \n\nfunction EditTasks(props) {\n    //for material ui select\n    const classes = useStyles();\n\n    const [details, setDetails] = useState([])\n    let id = props.match.params.id\n\n\n    useEffect(() => {\n        // let id = props.match.params.id\n        fetchTaskDetails(id)\n    }, [])\n\n\n       //update with information\n       const handleOnChange = (e) => {\n        setDetails({...details,\n          [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSetDate = (date) => {\n        date.setDate(date.getDate())\n        console.log(date)\n        setDetails({\n          ...details,\n            task_date: date\n        })\n      };\n\n      //update db - need id #\n      const onSaveTasks= (task) => {\n\n        axios.post(`http://localhost:8080/tasks/update-task/${id}`,\n          {\n            data: task\n          })\n          .then(response => {let success = response.data.success\n  \n            if (success) {\n             props.history.push('/tasks')\n            } else {\n                console.log(\"did not update\")\n                }\n            })    \n      }\n\n\n    // get task details\n    const fetchTaskDetails = (id) => {\n        axios.get(`http://localhost:8080/tasks/edit-task/${id}`)\n        .then(response => {\n          setDetails(response.data[0])\n        })\n    }\n\n    console.log(details)\n\n    return(\n        <div>\n           <p>Edit</p>\n           <div>\n            <TextField onChange={handleOnChange} name=\"task_name\" value={details.task_name} id=\"standard-search\" label=\"\" type=\"text\" />\n            </div>\n            <div>                 \n            <TextField onChange={handleOnChange} name=\"task_description\" value={details.task_description} id=\"standard-textarea\" label=\"\" placeholder=\"Description\" multiline />\n            </div>\n            <div>                  \n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Date\"\n                    format=\"MM/dd/yyyy\"\n                    name=\"task_date\"\n                    value={details.task_date}\n                    onChange={handleSetDate}\n                    KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                    }}\n                />\n                </Grid>\n            </MuiPickersUtilsProvider>\n            </div>\n              <div>\n                <button onClick={() => onSaveTasks(details)}>Save</button>\n              </div>    \n            \n        </div>\n    )\n}\n\nexport default EditTasks","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGardenName.js",["120","121","122"],{"ruleId":"123","severity":1,"message":"124","line":20,"column":8,"nodeType":"125","messageId":"126","endLine":20,"endColumn":19},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"123","severity":1,"message":"131","line":16,"column":9,"nodeType":"125","messageId":"126","endLine":16,"endColumn":16},{"ruleId":"132","severity":1,"message":"133","line":4,"column":1,"nodeType":"134","endLine":26,"endColumn":2},{"ruleId":"135","severity":1,"message":"136","line":46,"column":8,"nodeType":"137","endLine":46,"endColumn":31,"suggestions":"138"},{"ruleId":"123","severity":1,"message":"139","line":4,"column":8,"nodeType":"125","messageId":"126","endLine":4,"endColumn":25},{"ruleId":"123","severity":1,"message":"140","line":5,"column":8,"nodeType":"125","messageId":"126","endLine":5,"endColumn":17},{"ruleId":"123","severity":1,"message":"141","line":36,"column":23,"nodeType":"125","messageId":"126","endLine":36,"endColumn":36},{"ruleId":"123","severity":1,"message":"131","line":31,"column":9,"nodeType":"125","messageId":"126","endLine":31,"endColumn":16},{"ruleId":"135","severity":1,"message":"142","line":39,"column":6,"nodeType":"137","endLine":39,"endColumn":8,"suggestions":"143"},{"ruleId":"123","severity":1,"message":"131","line":25,"column":12,"nodeType":"125","messageId":"126","endLine":25,"endColumn":19},{"ruleId":"123","severity":1,"message":"131","line":36,"column":11,"nodeType":"125","messageId":"126","endLine":36,"endColumn":18},{"ruleId":"135","severity":1,"message":"144","line":41,"column":8,"nodeType":"137","endLine":41,"endColumn":10,"suggestions":"145"},{"ruleId":"123","severity":1,"message":"131","line":32,"column":11,"nodeType":"125","messageId":"126","endLine":32,"endColumn":18},{"ruleId":"135","severity":1,"message":"146","line":41,"column":8,"nodeType":"137","endLine":41,"endColumn":10,"suggestions":"147"},{"ruleId":"123","severity":1,"message":"148","line":1,"column":8,"nodeType":"125","messageId":"126","endLine":1,"endColumn":13},{"ruleId":"123","severity":1,"message":"149","line":2,"column":9,"nodeType":"125","messageId":"126","endLine":2,"endColumn":18},{"ruleId":"123","severity":1,"message":"150","line":2,"column":20,"nodeType":"125","messageId":"126","endLine":2,"endColumn":28},"no-unused-vars","'requireAuth' is defined but never used.","Identifier","unusedVar","no-native-reassign",["151"],"no-negated-in-lhs",["152"],"'classes' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'newPlant' and 'props.displayZone'. Either include them or remove the dependency array. You can also do a functional update 'setNewPlant(n => ...)' if you only need 'newPlant' in the 'setNewPlant' call.","ArrayExpression",["153"],"'DisplayGardenName' is defined but never used.","'AddGarden' is defined but never used.","'setGardenName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.",["154"],"React Hook useEffect has a missing dependency: 'fetchTasks'. Either include it or remove the dependency array.",["155"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["156"],"'axios' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [newPlant, props.displayGardenID, props.displayZone]",{"range":"165","text":"166"},"Update the dependencies array to be: [props.match.params.id]",{"range":"167","text":"168"},"Update the dependencies array to be: [fetchTasks]",{"range":"169","text":"170"},"Update the dependencies array to be: [id]",{"range":"171","text":"172"},[1277,1300],"[newPlant, props.displayGardenID, props.displayZone]",[910,912],"[props.match.params.id]",[1170,1172],"[fetchTasks]",[984,986],"[id]"]