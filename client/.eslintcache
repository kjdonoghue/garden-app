[{"/Users/katydonoghue/Desktop/garden-app/client/src/index.js":"1","/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js":"2","/Users/katydonoghue/Desktop/garden-app/client/src/App.js":"3","/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js":"4","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js":"5","/Users/katydonoghue/Desktop/garden-app/client/src/components/Tasks.js":"6","/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js":"7","/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js":"8","/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js":"9","/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js":"10","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducer.js":"11","/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js":"12","/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js":"13","/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js":"14","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js":"15","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js":"16","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js":"17","/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js":"18","/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js":"19","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddGarden.js":"20","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddTasks.js":"21","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayTasks.js":"22"},{"size":2904,"mtime":1607609974002,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1607380517237,"results":"25","hashOfConfig":"24"},{"size":134,"mtime":1607447440925,"results":"26","hashOfConfig":"24"},{"size":940,"mtime":1607468650715,"results":"27","hashOfConfig":"24"},{"size":2771,"mtime":1607609974001,"results":"28","hashOfConfig":"24"},{"size":241,"mtime":1607620156496,"results":"29","hashOfConfig":"24"},{"size":184,"mtime":1607447440925,"results":"30","hashOfConfig":"24"},{"size":114,"mtime":1607447440926,"results":"31","hashOfConfig":"24"},{"size":3574,"mtime":1607463833756,"results":"32","hashOfConfig":"24"},{"size":946,"mtime":1607463833755,"results":"33","hashOfConfig":"24"},{"size":559,"mtime":1607609974002,"results":"34","hashOfConfig":"24"},{"size":37,"mtime":1607463833758,"results":"35","hashOfConfig":"24"},{"size":249,"mtime":1607463833760,"results":"36","hashOfConfig":"24"},{"size":587,"mtime":1607463833756,"results":"37","hashOfConfig":"24"},{"size":1864,"mtime":1607609974000,"results":"38","hashOfConfig":"24"},{"size":5407,"mtime":1607614241019,"results":"39","hashOfConfig":"24"},{"size":325,"mtime":1607609974000,"results":"40","hashOfConfig":"24"},{"size":3569,"mtime":1607609973999,"results":"41","hashOfConfig":"24"},{"size":5191,"mtime":1607609974001,"results":"42","hashOfConfig":"24"},{"size":344,"mtime":1607609973998,"results":"43","hashOfConfig":"24"},{"size":3236,"mtime":1607614241019,"results":"44","hashOfConfig":"24"},{"size":4734,"mtime":1607622206442,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"mtuggw",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"49"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"49"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/katydonoghue/Desktop/garden-app/client/src/index.js",["98"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport {createStore} from \"redux\"\nimport {Provider} from \"react-redux\"\nimport reducer from './store/reducer'\nimport BaseLayout from './components/BaseLayout';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport DisplayGarden from './components/DisplayGarden';\nimport AddGarden from './components/AddGarden'\nimport Guides from './components/Guides';\nimport Tasks from './components/Tasks';\nimport Zone from './components/Zone';\nimport PlantDetails from './components/PlantDetails'\nimport {setAuthenticationHeader} from './utils/authHeaders'\nimport requireAuth from './components/requireAuth'\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\"\n\n//change material ui colors\nconst theme = createMuiTheme({\n  palette: {\n     primary: {\n        main: \"#434c23\" // dark green\n               },\n     secondary: {\n        main: \"#ca912f\" //yellow\n                }\n           },\n//fontFamily: font // as an aside, highly recommend importing roboto font for Material UI projects! Looks really nice\n});\n\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n//get token from local storage\nconst token = localStorage.getItem('jsonwebtoken')\n\n//set header for axios\nsetAuthenticationHeader(token)\n\n// keep user logged in even if restart\n// if(token) {\n//   store.dispatch({\n//     type: 'LOGGED_IN'\n//   })\n// }\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <Switch>\n        <ThemeProvider theme={theme}>\n          <BaseLayout>\n            <Route component = {Register} path='/register' />\n            <Route component = {Login} path='/login' />\n            <Route component = {App} path='/' exact />\n            <Route component = {Guides} path='/guides' />\n            {/* <Route component = {requireAuth(DisplayGarden)} path='/garden' /> */}\n            <Route component = {DisplayGarden} path='/garden' />\n            <Route component = {AddGarden} path='/add-garden' />\n            {/* <Route component = {requireAuth(Tasks)} path='/tasks' /> */}\n            <Route component = {PlantDetails} path='/plant/:id' />\n            <Route component = {Tasks} path='/tasks' />\n            <Route component = {Zone} path='/zone' />\n          </BaseLayout>\n          </ThemeProvider>\n        </Switch>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["99","100"],"/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/App.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js",["101"],"import React, {useState} from \"react\"\nimport {connect} from \"react-redux\"\n\nfunction FindZone(props) {\n\n   const [zip, setZip] = useState()\n   const [zone, setZone] = useState([])\n\n    const handleOnChange = (e) => {\n        return (\n            setZip({\n                zip: e.target.value\n            })\n        )\n    } \n\n    const handleOnClick = (zip) => {\n        fetch(`https://phzmapi.org/${zip}.json`)\n        .then(response => response.json())\n        .then(result => {\n            setZone(result.zone)\n        })\n      }\n\n      console.log(zone)\n    \n  return (\n    <div className=\"ZoneContainer\">\n      <div>\n      <h1>Find Your Growing Zone</h1>\n      <input type=\"text\" placeholder=\"Enter Zip Code\" name=\"zone\" onChange={handleOnChange} />\n      <button onClick={() => handleOnClick(zip.zip)}>Submit</button>\n      </div>\n      <div>\n          <p>Your Zone is: {zone} </p>\n      </div>\n    </div>\n  );\n}\n\nexport default FindZone","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Tasks.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducer.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js",["102"],"import React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nexport default function(ComposedComponent) {\n\n    class Authenticate extends Component {\n        constructor(props) {\n            super(props)\n\n            if (!this.props.isAuth) {\n                this.props.history.push('/login')\n            }\n        }\n        render() {\n            return <ComposedComponent {...this.props} />\n        }\n    }   \n\n    const mapStateToProps = (state) => {\n        return {\n            isAuth: state.isAuth\n        }\n    }\n\n    return connect(mapStateToProps)(Authenticate)\n}","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js",["103"],"import React, { useState, useEffect } from \"react\";\nimport {connect} from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\n// import Grid from '@material-ui/core/Grid';\n// import DateFnsUtils from '@date-io/date-fns';\n// import { MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport axios from \"axios\";\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n  }));\n\n\nfunction AddPlant(props) {\n    //for material ui select\n    const classes = useStyles();\n\n    const [newPlant, setNewPlant] = useState({})\n\n    // add zone and garden id to plant info onload\n    useEffect(() => {\n      setNewPlant({...newPlant,\n        zone: props.displayZone,\n        garden_id: props.displayGardenID\n      })\n    }, [props.displayGardenID])        \n    \n    //update with information\n    const handleOnChange = (e) => {\n        setNewPlant({...newPlant,\n          [e.target.name]: e.target.value\n        })\n    }\n\n    const onSaveToGarden = (plant) => {\n      axios.post('http://localhost:8080/garden/save-new',\n        {\n          data: newPlant\n        })\n        .then(response => {let success = response.data.success\n\n          if (success) {\n           //reload add plant and garden\n           console.log(\"Success\") \n           setNewPlant({\n             plant_name: '',\n             plant_family: '',\n             company: '',\n             type: '',\n           })\n          } else {\n              console.log(\"did not update\")\n              }\n          })    \n    }\n\n    \n\n      return (\n        <div>\n            <p>Add Plant</p>\n            <div>\n            <TextField onChange={handleOnChange} name=\"plant_name\" value={newPlant.plant_name} id=\"standard-search\" label=\"Plant Name\" type=\"text\" />\n            </div>\n            <div>\n            <FormControl className={classes.formControl}>            \n                  <InputLabel id=\"demo-simple-select-label\">Family</InputLabel>\n                  <Select onChange={handleOnChange} labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" name=\"plant_family\" value={newPlant.plant_family} >\n                      <MenuItem value=\"beans\">Beans</MenuItem>\n                      <MenuItem value=\"beets\">Beets</MenuItem>\n                      <MenuItem value=\"broccoli\">Broccoli</MenuItem>\n                      <MenuItem value=\"cabbage\">Cabbage</MenuItem>\n                      <MenuItem value=\"carrots\">Carrots</MenuItem>\n                      <MenuItem value=\"cauliflower\">Cauliflower</MenuItem>\n                      <MenuItem value=\"celery\">Celery</MenuItem>\n                      <MenuItem value=\"corn\">Corn</MenuItem>\n                      <MenuItem value=\"cowpeas\">Cowpeas</MenuItem>\n                      <MenuItem value=\"cucumbers\">Cucumbers</MenuItem>\n                      <MenuItem value=\"eggplant\">Eggplant</MenuItem>\n                      <MenuItem value=\"greens\">Greens</MenuItem>\n                      <MenuItem value=\"leeks\">Leeks</MenuItem>\n                      <MenuItem value=\"melons\">Melons</MenuItem>\n                      <MenuItem value=\"okra\">Okra</MenuItem>\n                      <MenuItem value=\"peanuts\">Peanuts</MenuItem>\n                      <MenuItem value=\"peas\">Peas</MenuItem>\n                      <MenuItem value=\"peppers\">Peppers</MenuItem>\n                      <MenuItem value=\"potatoes\">Potatoes</MenuItem>\n                      <MenuItem value=\"summer squash\">Summer Squash</MenuItem>\n                      <MenuItem value=\"winter squash\">Winter Squash</MenuItem>\n                      <MenuItem value=\"sweet potatoes\">Sweet Potatoes</MenuItem>\n                      <MenuItem value=\"tomatoes\">Tomatoes</MenuItem>        \n                  </Select>\n              </FormControl>                        \n              <TextField onChange={handleOnChange} name=\"company\" id=\"standard-search\" label=\"Company\" type=\"text\" value={newPlant.company} />\n              <FormControl className={classes.formControl}>            \n                  <InputLabel id=\"demo-simple-select-label\">Start From</InputLabel>\n                  <Select onChange={handleOnChange} labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" name=\"type\" value={newPlant.type} >\n                      <MenuItem value=\"seed\">Seed</MenuItem>\n                      <MenuItem value=\"plant\">Plant</MenuItem>\n                      <MenuItem value=\"sets\">Sets</MenuItem>\n                      <MenuItem value=\"slips\">Slips</MenuItem>                   \n                  </Select>\n              </FormControl>\n              </div>\n              <div>\n                <button onClick={() => onSaveToGarden(newPlant)}>Save</button>\n              </div>          \n        </div>\n\n        \n    );\n} \n\nconst mapStatesToProps = (state) =>  {\n  return {\n    displayZone: state.zone,\n    displayGardenID: state.primary_garden   \n  }\n}\n\nexport default connect(mapStatesToProps)(AddPlant)","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js",["104","105"],"import {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport {connect} from 'react-redux'\nimport {NavLink} from \"react-router-dom\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n//For Material UI\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  })); \n\nfunction ChooseGarden(props) {\n\n    //for material ui\n    const classes = useStyles();\n\n    const [gardens, setGardens] = useState([])\n    const [selectedGarden, setSelectedGarden] = useState()\n    const [gardenName, setGardenName] = useState()\n\n    useEffect(() => {\n        // get user defaults\n        // fetchUserGardenDefaults()\n\n        //get all garden options\n        displayGardenOptions()\n    }, [])\n\n    // get user defaults - should this move to action creators?\n    // const fetchUserGardenDefaults = () => {\n    //     axios.get('http://localhost:8080/garden/defaults')\n    //     .then(response => {\n    //         let zone = response.data[0].zone\n    //         let garden_id = response.data[0].primary_garden\n    //         props.onSetZoneDefault(zone)\n    //         props.onSetGardenDefault(garden_id)\n    //     })\n    // }\n\n    //get all garden options\n    const displayGardenOptions = () => {\n        axios.get('http://localhost:8080/garden/list-gardens')\n        .then(response => {\n            setGardens(response.data)\n        })\n    }\n\n    const handleOnChange = (e) => {\n            setGardenName({...gardenName,\n                [e.target.name]:  (e.target.value)\n\n            })\n\n        let key = [e.target.key] \n        console.log(key)      \n        props.onSetGardenDefault(e.target.value)\n        \n    }\n\n    console.log(gardenName)\n\n    //map through gardens and add them to drop down variables\n\n    const gardenList = gardens.map(garden => {\n        return <MenuItem name={garden.garden_name} value={garden.id} key={garden.id}>{garden.garden_name}</MenuItem>\n    })\n\n        return (\n        <div>\n           <p>choose garden</p> \n\n           <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">Garden</InputLabel>\n                <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                // name=\"Test\"\n                // value={selectedGarden}               \n                onChange={handleOnChange}\n                label=\"garden\"\n                >\n                    {gardenList}\n                </Select>\n            </FormControl>\n            <div>\n                <b><NavLink to = \"/add-garden\">Create a new Garden</NavLink></b>\n            </div>\n        </div>\n    )\n}\n\nconst mapStatesToProps = (state) => {\n    return {\n        displayGardenDefault: state.primary_garden,\n        displayZoneDefault: state.zone\n\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSetGardenDefault: (garden_id) => dispatch({type: 'SET_GARDEN', payload: garden_id}),\n        onSetZoneDefault: (zone) => dispatch({type: 'SET_ZONE', payload: zone})         \n    }\n}\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(ChooseGarden)","/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js",["106","107"],"import { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n}));\n\n\nfunction PlantDetails(props) {\n  //for material ui select\n  const classes = useStyles();\n\n  const [plantDetails, setPlantDetails] = useState([])\n\n  useEffect(() => {\n    let id = props.match.params.id\n    fetchPlantDetails(id)\n\n  }, [])\n\n  const fetchPlantDetails = (id) => {\n    axios.get(`http://localhost:8080/garden/plant/${id}`)\n      .then(response => {\n        setPlantDetails(response.data[0])\n      })\n\n  }\n\n  const handleOnChange = (e) => {\n    setPlantDetails({\n      ...plantDetails,\n      [e.target.name]: e.target.value\n    })\n\n  }\n\n  //   // handle change to planting date\n  const handlePlantingChange = (date) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setPlantDetails({\n      ...plantDetails,\n      planting_date: date\n    })\n  };\n\n  // handle change to first harvest date\n  const handleFirstHarvestChange = (date) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setPlantDetails({\n      ...plantDetails,\n      first_harvest: date\n    })\n  };\n\n  // handle change to last harvest date\n  const handleLastHarvestChange = (date, e) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setPlantDetails({\n      ...plantDetails,\n      last_harvest: date\n    })\n  };\n\n  const handleSave = () => {\n    axios.post('http://localhost:8080/garden/save-edit',\n      {\n        data: plantDetails\n      })\n      .then(response => {\n\n        let success = response.data.success\n\n        if (success) {\n          props.history.push('/garden')\n        } else {\n          console.log(\"did not update\")\n        }\n      })\n  }\n\n  const handleDelete = () => {\n    let id = props.match.params.id\n    axios.delete(`http://localhost:8080/garden/delete-plant/${id}`)\n      .then(response => {\n\n        let success = response.data.success\n\n        if (success) {\n          props.history.push('/garden')\n        } else {\n          console.log(\"did not update\")\n        }\n      })\n  }\n\n  return (\n    <div>\n      <p>Plant Details</p>\n\n      <label> Plant: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.plant_name} name=\"plant_name\" type=\"text\" /> </label>\n      <label> Plant Family: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.plant_family} name=\"plant_family\" type=\"text\" /> </label>\n      <label> Start From: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.type} name=\"company\" type=\"text\" /> </label>\n      <label> Supplier: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.company} name=\"company\" type=\"text\" /> </label>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Plant Outside\"\n            format=\"MM/dd/yyyy\"\n            name=\"planting_date\"\n            value={plantDetails.planting_date}\n            onChange={handlePlantingChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"First Harvest\"\n            format=\"MM/dd/yyyy\"\n            name=\"first_harvest\"\n            value={plantDetails.first_harvest}\n            onChange={handleFirstHarvestChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Last Harvest\"\n            format=\"MM/dd/yyyy\"\n            name=\"last_harvest\"\n            value={plantDetails.last_harvest}\n            onChange={handleLastHarvestChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <label> Notes: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.notes} name=\"notes\" type=\"text\" /> </label>\n\n      <button onClick={handleSave}>Save Changes</button>\n\n      <button onClick={handleDelete}>Delete</button>\n\n    </div>\n  )\n}\n\nexport default PlantDetails","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddGarden.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/AddTasks.js",["108"],"import React, { useState } from \"react\";\n// import {connect} from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\n// import InputLabel from '@material-ui/core/InputLabel';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import FormControl from '@material-ui/core/FormControl';\n// import Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport axios from \"axios\";\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n  }));\n\n\nfunction AddTasks(props) {\n    //for material ui select\n    const classes = useStyles();\n\n    const [task, setTask] = useState({})\n\n     \n    //update with information\n    const handleOnChange = (e) => {\n        setTask({...task,\n          [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSetDate = (date) => {\n        date.setDate(date.getDate())\n        console.log(date)\n        setTask({\n          ...task,\n            task_date: date\n        })\n      };\n\n    const onSaveTasks= (task) => {\n      axios.post('http://localhost:8080/tasks/add-task',\n        {\n          data: task\n        })\n        .then(response => {let success = response.data.success\n\n          if (success) {\n           \n           console.log(\"Success\") \n           setTask({\n               task_name: '',\n               task_description: ''      \n            })\n          } else {\n              console.log(\"did not update\")\n              }\n          })    \n    }\n\n    \n\n      return (\n        <div>\n            <p>Add Task</p>\n            <div>\n            <TextField onChange={handleOnChange} name=\"task_name\" value={task.task_name} id=\"standard-search\" label=\"Task\" type=\"text\" />\n            </div>\n            <div>                 \n            <TextField onChange={handleOnChange} name=\"task_description\" value={task.task_description} id=\"standard-textarea\" label=\"Description\" placeholder=\"Description\" multiline />\n            </div>\n            <div>                  \n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Date\"\n                    format=\"MM/dd/yyyy\"\n                    name=\"task_date\"\n                    value={task.task_date}\n                    onChange={handleSetDate}\n                    KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                    }}\n                />\n                </Grid>\n            </MuiPickersUtilsProvider>\n            </div>\n              <div>\n                <button onClick={() => onSaveTasks(task)}>Save</button>\n              </div>          \n        </div>\n\n        \n    );\n} \n\n\nexport default AddTasks","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayTasks.js",["109","110"],{"ruleId":"111","severity":1,"message":"112","line":20,"column":8,"nodeType":"113","messageId":"114","endLine":20,"endColumn":19},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"111","severity":1,"message":"119","line":2,"column":9,"nodeType":"113","messageId":"114","endLine":2,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":4,"column":1,"nodeType":"122","endLine":26,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":46,"column":8,"nodeType":"125","endLine":46,"endColumn":31,"suggestions":"126"},{"ruleId":"111","severity":1,"message":"127","line":35,"column":12,"nodeType":"113","messageId":"114","endLine":35,"endColumn":26},{"ruleId":"111","severity":1,"message":"128","line":35,"column":28,"nodeType":"113","messageId":"114","endLine":35,"endColumn":45},{"ruleId":"111","severity":1,"message":"129","line":31,"column":9,"nodeType":"113","messageId":"114","endLine":31,"endColumn":16},{"ruleId":"123","severity":1,"message":"130","line":39,"column":6,"nodeType":"125","endLine":39,"endColumn":8,"suggestions":"131"},{"ruleId":"111","severity":1,"message":"129","line":36,"column":11,"nodeType":"113","messageId":"114","endLine":36,"endColumn":18},{"ruleId":"111","severity":1,"message":"132","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":17},{"ruleId":"123","severity":1,"message":"133","line":42,"column":8,"nodeType":"125","endLine":42,"endColumn":10,"suggestions":"134"},"no-unused-vars","'requireAuth' is defined but never used.","Identifier","unusedVar","no-native-reassign",["135"],"no-negated-in-lhs",["136"],"'connect' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'newPlant' and 'props.displayZone'. Either include them or remove the dependency array. You can also do a functional update 'setNewPlant(n => ...)' if you only need 'newPlant' in the 'setNewPlant' call.","ArrayExpression",["137"],"'selectedGarden' is assigned a value but never used.","'setSelectedGarden' is assigned a value but never used.","'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.",["138"],"'TextField' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchTasks'. Either include it or remove the dependency array.",["139"],"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [newPlant, props.displayGardenID, props.displayZone]",{"range":"146","text":"147"},"Update the dependencies array to be: [props.match.params.id]",{"range":"148","text":"149"},"Update the dependencies array to be: [fetchTasks]",{"range":"150","text":"151"},[1277,1300],"[newPlant, props.displayGardenID, props.displayZone]",[910,912],"[props.match.params.id]",[1223,1225],"[fetchTasks]"]