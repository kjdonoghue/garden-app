[{"/Users/katydonoghue/Desktop/garden-app/client/src/index.js":"1","/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js":"2","/Users/katydonoghue/Desktop/garden-app/client/src/App.js":"3","/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js":"4","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js":"5","/Users/katydonoghue/Desktop/garden-app/client/src/components/Tasks.js":"6","/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js":"7","/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js":"8","/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js":"9","/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js":"10","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducer.js":"11","/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js":"12","/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js":"13","/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js":"14","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js":"15","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js":"16","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js":"17","/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js":"18","/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js":"19"},{"size":2792,"mtime":1607535280909,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1607380517237,"results":"22","hashOfConfig":"21"},{"size":134,"mtime":1607447440925,"results":"23","hashOfConfig":"21"},{"size":940,"mtime":1607468650715,"results":"24","hashOfConfig":"21"},{"size":2771,"mtime":1607520440266,"results":"25","hashOfConfig":"21"},{"size":112,"mtime":1607447440928,"results":"26","hashOfConfig":"21"},{"size":184,"mtime":1607447440925,"results":"27","hashOfConfig":"21"},{"size":114,"mtime":1607447440926,"results":"28","hashOfConfig":"21"},{"size":3574,"mtime":1607463833756,"results":"29","hashOfConfig":"21"},{"size":946,"mtime":1607463833755,"results":"30","hashOfConfig":"21"},{"size":556,"mtime":1607527159849,"results":"31","hashOfConfig":"21"},{"size":37,"mtime":1607463833758,"results":"32","hashOfConfig":"21"},{"size":249,"mtime":1607463833760,"results":"33","hashOfConfig":"21"},{"size":587,"mtime":1607463833756,"results":"34","hashOfConfig":"21"},{"size":2064,"mtime":1607531112067,"results":"35","hashOfConfig":"21"},{"size":5109,"mtime":1607469609312,"results":"36","hashOfConfig":"21"},{"size":325,"mtime":1607521757104,"results":"37","hashOfConfig":"21"},{"size":3382,"mtime":1607529433105,"results":"38","hashOfConfig":"21"},{"size":5529,"mtime":1607545681802,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"mtuggw",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/katydonoghue/Desktop/garden-app/client/src/index.js",["84"],"/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js",[],["85","86"],"/Users/katydonoghue/Desktop/garden-app/client/src/App.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js",["87"],"import React, {useState} from \"react\"\nimport {connect} from \"react-redux\"\n\nfunction FindZone(props) {\n\n   const [zip, setZip] = useState()\n   const [zone, setZone] = useState([])\n\n    const handleOnChange = (e) => {\n        return (\n            setZip({\n                zip: e.target.value\n            })\n        )\n    } \n\n    const handleOnClick = (zip) => {\n        fetch(`https://phzmapi.org/${zip}.json`)\n        .then(response => response.json())\n        .then(result => {\n            setZone(result.zone)\n        })\n      }\n\n      console.log(zone)\n    \n  return (\n    <div className=\"ZoneContainer\">\n      <div>\n      <h1>Find Your Growing Zone</h1>\n      <input type=\"text\" placeholder=\"Enter Zip Code\" name=\"zone\" onChange={handleOnChange} />\n      <button onClick={() => handleOnClick(zip.zip)}>Submit</button>\n      </div>\n      <div>\n          <p>Your Zone is: {zone} </p>\n      </div>\n    </div>\n  );\n}\n\nexport default FindZone","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Tasks.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducer.js",["88","89","90"],"const initialState = {\n    zone: '',\n    primary_garden: '',\n    isGuest: false,\n    isAuth: false\n}\n\nconst reducer = (state= initialState, action) => {\n\n    if (action.type == 'LOGGED_IN') {\n        return {...state,\n            isAuth: true\n        }\n    } else if (action.type == 'SET_GARDEN') {\n        return{...state,\n            primary_garden: action.payload\n        }\n    }  else if (action.type == 'SET_ZONE') {\n        return{...state,\n            zone: action.payload\n        }\n    } else {\n        return state\n    }\n}\n\n\nexport default reducer","/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js",["91"],"import React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nexport default function(ComposedComponent) {\n\n    class Authenticate extends Component {\n        constructor(props) {\n            super(props)\n\n            if (!this.props.isAuth) {\n                this.props.history.push('/login')\n            }\n        }\n        render() {\n            return <ComposedComponent {...this.props} />\n        }\n    }   \n\n    const mapStateToProps = (state) => {\n        return {\n            isAuth: state.isAuth\n        }\n    }\n\n    return connect(mapStateToProps)(Authenticate)\n}","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js",["92","93","94","95","96"],"import React, { useState } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n  }));\n\n\nfunction AddPlant() {\n   //for material ui select\n   const classes = useStyles();\n\n  const [plantName, setPlantName] = useState()\n  const [plantFamily, setPlantFamily] = useState()\n  const [sowDate, setSowDate] = useState(new Date('2021-04-07'));\n  //put lastfrost date in here\n\n  //calc sow date by veg family or send last frost through and calc on server\n  const handleDateChange = (date) => {\n    date.setDate(date.getDate() + 50)\n    console.log(date)\n    setSowDate(date);\n  };\n\n  const handleSelectFamily = (event) => {        \n    setPlantFamily(event.target.value)\n  };\n\n  const handlePlantName = (e) => {\n    setPlantName(e.target.value)\n  }\n\n  const onSaveToGarden = (id, name, family, sow_date) =>{\n    console.log(id)\n    console.log(name)\n    console.log(family)\n    console.log(sow_date)\n    fetch(\"url\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        garden_id: id,\n        name: name,\n        family: family,\n        sow_date: sow_date\n\n      })\n  })\n  }\n\n\n    return (\n      <div>\n          <p>Add Plant</p>\n          <div>\n          <TextField onChange={handlePlantName} id=\"standard-search\" label=\"Plant Name\" type=\"text\" />\n          </div>\n          <div>\n          <FormControl className={classes.formControl}>            \n                <InputLabel id=\"demo-simple-select-label\">Family</InputLabel>\n                <Select onChange={handleSelectFamily} labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={plantFamily} >\n                    <MenuItem value={1}>Beans</MenuItem>\n                    <MenuItem value={2}>Beets</MenuItem>\n                    <MenuItem value={3}>Broccoli</MenuItem>\n                    <MenuItem value={4}>Cabbage</MenuItem>\n                    <MenuItem value={5}>Carrots</MenuItem>\n                    <MenuItem value={6}>Cauliflower</MenuItem>\n                    <MenuItem value={7}>Celery</MenuItem>\n                    <MenuItem value={8}>Corn</MenuItem>\n                    <MenuItem value={9}>Cowpeas</MenuItem>\n                    <MenuItem value={10}>Cucumbers</MenuItem>\n                    <MenuItem value={11}>Eggplant</MenuItem>\n                    <MenuItem value={13}>Greens</MenuItem>\n                    <MenuItem value={14}>Leeks</MenuItem>\n                    <MenuItem value={15}>Melons</MenuItem>\n                    <MenuItem value={16}>Okra</MenuItem>\n                    <MenuItem value={19}>Peanuts</MenuItem>\n                    <MenuItem value={20}>Peas</MenuItem>\n                    <MenuItem value={21}>Peppers</MenuItem>\n                    <MenuItem value={22}>Potatoes</MenuItem>\n                    <MenuItem value={24}>Summer Squash</MenuItem>\n                    <MenuItem value={25}>Winter Squash</MenuItem>\n                    <MenuItem value={26}>Sweet Potatoes</MenuItem>\n                    <MenuItem value={28}>Tomatoes</MenuItem>        \n                </Select>\n            </FormControl>\n            </div>\n            <div>\n              <button onClick={() => onSaveToGarden(1, plantName, plantFamily, sowDate)}>Save</button>\n            </div>\n            {/* <div>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                  margin=\"normal\"\n                  id=\"date-picker-dialog\"\n                  label=\"Sow Seeds\"\n                  format=\"MM/dd/yyyy\"\n                  value={sowDate}\n                  onChange={handleDateChange}\n                  KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                  }}\n                />                    \n              </Grid>\n            </MuiPickersUtilsProvider>\n            </div> */}\n          {/* input a plant name\n          select the plant family\n          get the information from the plant family\n          get last frost date from zone\n          post to the server\n            garden # - props\n            plant variety name - user input\n            plant family - select from drop down\n            last frost date - from zone - global state\n            sow_days - from plant family - maybe hardcode? */}\n\n\n      </div>\n\n      \n    );\n} \n\nexport default AddPlant","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js",["97","98","99"],"import {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport {connect} from 'react-redux'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n//For Material UI\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  })); \n\nfunction ChooseGarden(props) {\n\n    //for material ui\n    const classes = useStyles();\n\n    const [gardens, setGardens] = useState([])\n    const [selectedGarden, setSelectedGarden] = useState(props.displayGardenDefault)\n\n    useEffect(() => {\n        // get user defaults\n        fetchUserGardenDefaults()\n\n        //get all garden options\n        displayGardenOptions()\n    }, [])\n\n    // get user defaults - should this move to action creators?\n    const fetchUserGardenDefaults = () => {\n        axios.get('http://localhost:8080/garden/defaults')\n        .then(response => {\n            let zone = response.data[0].zone\n            let garden_id = response.data[0].primary_garden\n            props.onSetZoneDefault(zone)\n            props.onSetGardenDefault(garden_id)\n        })\n    }\n\n    //get all garden options\n    const displayGardenOptions = () => {\n        axios.get('http://localhost:8080/garden/list-gardens')\n        .then(response => {\n            setGardens(response.data)\n        })\n    }\n\n    const handleOnChange = (e) => {\n\n        props.onSetGardenDefault(e.target.value)\n    }\n\n    //map through gardens and add them to drop down variables\n\n    const gardenList = gardens.map(garden => {\n        return <MenuItem value={garden.id}>{garden.garden_name}</MenuItem>\n    })\n\n    //pull primary garden id & zone when open the page\n    // share both of these with global\n    //pull garden information\n    //display primary garden name\n    //show other gardens by name (value=garden id) in drop down \n    //option to change gardens - if change this needs to update the global state but not account info\n\n\n    return (\n        <div>\n           <p>choose garden</p> \n\n           <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">Garden</InputLabel>\n                <Select\n                labelId=\"demo-simple-select-outlined-label\"\n                id=\"demo-simple-select-outlined\"\n                name=\"garden\"                \n                onChange={handleOnChange}\n                label=\"garden\"\n                >\n                    {gardenList}\n                </Select>\n            </FormControl>\n        </div>\n    )\n}\n\nconst mapStatesToProps = (state) => {\n    return {\n        displayGardenDefault: state.primary_garden,\n        displayZoneDefault: state.zone\n\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSetGardenDefault: (garden_id) => dispatch({type: 'SET_GARDEN', payload: garden_id}),\n        onSetZoneDefault: (zone) => dispatch({type: 'SET_ZONE', payload: zone})         \n    }\n}\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(ChooseGarden)","/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js",["100","101"],{"ruleId":"102","severity":1,"message":"103","line":19,"column":8,"nodeType":"104","messageId":"105","endLine":19,"endColumn":19},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"102","severity":1,"message":"110","line":2,"column":9,"nodeType":"104","messageId":"105","endLine":2,"endColumn":16},{"ruleId":"111","severity":1,"message":"112","line":10,"column":21,"nodeType":"113","messageId":"114","endLine":10,"endColumn":23},{"ruleId":"111","severity":1,"message":"112","line":14,"column":28,"nodeType":"113","messageId":"114","endLine":14,"endColumn":30},{"ruleId":"111","severity":1,"message":"112","line":18,"column":29,"nodeType":"113","messageId":"114","endLine":18,"endColumn":31},{"ruleId":"115","severity":1,"message":"116","line":4,"column":1,"nodeType":"117","endLine":26,"endColumn":2},{"ruleId":"102","severity":1,"message":"118","line":9,"column":8,"nodeType":"104","messageId":"105","endLine":9,"endColumn":12},{"ruleId":"102","severity":1,"message":"119","line":10,"column":8,"nodeType":"104","messageId":"105","endLine":10,"endColumn":20},{"ruleId":"102","severity":1,"message":"120","line":11,"column":10,"nodeType":"104","messageId":"105","endLine":11,"endColumn":33},{"ruleId":"102","severity":1,"message":"121","line":11,"column":35,"nodeType":"104","messageId":"105","endLine":11,"endColumn":53},{"ruleId":"102","severity":1,"message":"122","line":42,"column":9,"nodeType":"104","messageId":"105","endLine":42,"endColumn":25},{"ruleId":"102","severity":1,"message":"123","line":34,"column":12,"nodeType":"104","messageId":"105","endLine":34,"endColumn":26},{"ruleId":"102","severity":1,"message":"124","line":34,"column":28,"nodeType":"104","messageId":"105","endLine":34,"endColumn":45},{"ruleId":"125","severity":1,"message":"126","line":42,"column":8,"nodeType":"127","endLine":42,"endColumn":10,"suggestions":"128"},{"ruleId":"102","severity":1,"message":"129","line":31,"column":10,"nodeType":"104","messageId":"105","endLine":31,"endColumn":17},{"ruleId":"125","severity":1,"message":"130","line":39,"column":8,"nodeType":"127","endLine":39,"endColumn":10,"suggestions":"131"},"no-unused-vars","'requireAuth' is defined but never used.","Identifier","unusedVar","no-native-reassign",["132"],"no-negated-in-lhs",["133"],"'connect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Grid' is defined but never used.","'DateFnsUtils' is defined but never used.","'MuiPickersUtilsProvider' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'handleDateChange' is assigned a value but never used.","'selectedGarden' is assigned a value but never used.","'setSelectedGarden' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchUserGardenDefaults'. Either include it or remove the dependency array.","ArrayExpression",["134"],"'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.",["135"],"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [fetchUserGardenDefaults]",{"range":"140","text":"141"},"Update the dependencies array to be: [props.match.params.id]",{"range":"142","text":"143"},[1061,1063],"[fetchUserGardenDefaults]",[927,929],"[props.match.params.id]"]