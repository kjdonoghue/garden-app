[{"/Users/katydonoghue/Desktop/garden-app/client/src/index.js":"1","/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js":"2","/Users/katydonoghue/Desktop/garden-app/client/src/App.js":"3","/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js":"4","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js":"5","/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js":"6","/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js":"7","/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js":"8","/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js":"9","/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js":"10","/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js":"11","/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js":"12","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js":"13","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js":"14","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js":"15","/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js":"16","/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js":"17","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddGarden.js":"18","/Users/katydonoghue/Desktop/garden-app/client/src/utils/history.js":"19","/Users/katydonoghue/Desktop/garden-app/client/src/components/DeleteGarden.js":"20","/Users/katydonoghue/Desktop/garden-app/client/src/components/DeletePlant.js":"21","/Users/katydonoghue/Desktop/garden-app/client/src/components/SetPrimaryGarden.js":"22","/Users/katydonoghue/Desktop/garden-app/client/src/components/Logout.js":"23","/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionCreators.js":"24","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/authenticated.js":"25","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/garden.js":"26","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/zone.js":"27","/Users/katydonoghue/Desktop/garden-app/client/src/components/LoginTest.js":"28","/Users/katydonoghue/Desktop/garden-app/client/src/components/Message.js":"29","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTableMobile.js":"30"},{"size":2959,"mtime":1607872547455,"results":"31","hashOfConfig":"32"},{"size":362,"mtime":1607380517237,"results":"33","hashOfConfig":"32"},{"size":1451,"mtime":1607870116953,"results":"34","hashOfConfig":"32"},{"size":3439,"mtime":1607875376353,"results":"35","hashOfConfig":"32"},{"size":3510,"mtime":1607874939205,"results":"36","hashOfConfig":"32"},{"size":184,"mtime":1607447440925,"results":"37","hashOfConfig":"32"},{"size":3719,"mtime":1607811986313,"results":"38","hashOfConfig":"32"},{"size":5325,"mtime":1607723211876,"results":"39","hashOfConfig":"32"},{"size":3830,"mtime":1607874869346,"results":"40","hashOfConfig":"32"},{"size":544,"mtime":1607806587382,"results":"41","hashOfConfig":"32"},{"size":249,"mtime":1607463833760,"results":"42","hashOfConfig":"32"},{"size":587,"mtime":1607463833756,"results":"43","hashOfConfig":"32"},{"size":3589,"mtime":1607884887268,"results":"44","hashOfConfig":"32"},{"size":6488,"mtime":1607802282921,"results":"45","hashOfConfig":"32"},{"size":1039,"mtime":1607794542370,"results":"46","hashOfConfig":"32"},{"size":2508,"mtime":1607802282921,"results":"47","hashOfConfig":"32"},{"size":6228,"mtime":1607794542371,"results":"48","hashOfConfig":"32"},{"size":2059,"mtime":1607811942648,"results":"49","hashOfConfig":"32"},{"size":86,"mtime":1607794542373,"results":"50","hashOfConfig":"32"},{"size":1360,"mtime":1607811901005,"results":"51","hashOfConfig":"32"},{"size":1521,"mtime":1607806590174,"results":"52","hashOfConfig":"32"},{"size":1291,"mtime":1607794542372,"results":"53","hashOfConfig":"32"},{"size":553,"mtime":1607875913475,"results":"54","hashOfConfig":"32"},{"size":1238,"mtime":1607806584298,"results":"55","hashOfConfig":"32"},{"size":370,"mtime":1607802282925,"results":"56","hashOfConfig":"32"},{"size":1177,"mtime":1607873282791,"results":"57","hashOfConfig":"32"},{"size":419,"mtime":1607802282926,"results":"58","hashOfConfig":"32"},{"size":3220,"mtime":1607870550977,"results":"59","hashOfConfig":"32"},{"size":161,"mtime":1607875239843,"results":"60","hashOfConfig":"32"},{"size":1521,"mtime":1607886354620,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},"mtuggw",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"65"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"65"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"65"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"65"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"65"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"65"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"65"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"65"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"65"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"65"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"65"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/katydonoghue/Desktop/garden-app/client/src/index.js",["135"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\"\nimport {createStore, combineReducers} from \"redux\"\nimport {Provider} from \"react-redux\"\nimport BaseLayout from './components/BaseLayout';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport DisplayGarden from './components/DisplayGarden';\nimport Guides from './components/Guides';\nimport Zone from './components/Zone';\nimport AddPlant from './components/AddPlant';\nimport PlantDetails from './components/PlantDetails'\nimport {setAuthenticationHeader} from './utils/authHeaders'\nimport requireAuth from './components/requireAuth'\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\"\nimport gardenReducer from './store/reducers/garden'\nimport zoneReducer from './store/reducers/zone'\nimport authenticatedReducer from './store/reducers/authenticated'\n\n//change material ui colors\nconst theme = createMuiTheme({\n  palette: {\n    // dark green\n     primary: {main: \"#434c23\"},\n     //yellow\n     secondary: {main: \"#ca912f\"}\n    },\n  });\n\n//reducers\nconst rootReducer = combineReducers({\n  gardenReducer: gardenReducer,\n  zoneReducer: zoneReducer,\n  authenticatedReducer: authenticatedReducer\n})  \n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n//get token from local storage\nconst token = localStorage.getItem('jsonwebtoken')\n\n//set header for axios\nsetAuthenticationHeader(token)\n\n// keep user logged in even if restart\n// if(token) {\n//   store.dispatch({\n//     type: 'LOGGED_IN'\n//   })\n// }\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <Switch>\n        <ThemeProvider theme={theme}>\n          <BaseLayout>\n            <Route component = {Register} path='/register' />\n            <Route component = {Login} path='/login' />\n            <Route component = {App} path='/' exact />\n            <Route component = {Guides} path='/guides' />\n            {/* <Route component = {requireAuth(DisplayGarden)} path='/garden' /> */}\n            <Route component = {DisplayGarden} path='/garden' />        \n            {/* <Route component = {requireAuth(Tasks)} path='/tasks' /> */}\n            <Route component = {PlantDetails} path='/detail/:id' />\n            <Route component = {AddPlant} path='/add-plant' />  \n            <Route component = {Zone} path='/zone' />\n          </BaseLayout>\n          </ThemeProvider>\n        </Switch>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["136","137"],"/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/App.js",["138"],"\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport greenhouse from './components/images/greenhouse.png'\nimport {NavLink} from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"appContainer\">\n        <div className=\"imageContainer\">\n          <img src={greenhouse} alt=\"greenhouse\" className=\"image\" />\n        </div>\n        <div className=\"textContainer\">\n          <h2>Headline here</h2>\n          <p>lots of copy here</p>\n          <p> and here</p>\n          <p>and here</p>\n          <div className='buttonContainer'>\n            <div className=\"buttonItem\">\n              <NavLink to='/register'><Button className=\"button\" variant=\"contained\" color=\"primary\"> Sign Up </Button></NavLink>\n            </div>\n            <div className=\"buttonItem\">\n            <NavLink to='/login'><Button className=\"button\" variant=\"contained\" color=\"primary\"> LogIn </Button></NavLink>\n            </div>\n            <div className=\"buttonItem\">\n            <NavLink to='/guides'><Button className=\"button\" variant=\"contained\" color=\"primary\"> Go to the Guides </Button></NavLink>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js",["139","140"],"import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport axios from \"axios\"\nimport * as actionCreators from '../store/actions/actionCreators'\nimport './css/zone.css'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Message from './Message'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\n\nfunction FindZone(props) {\n  const classes = useStyles();\n\n\n  const [zip, setZip] = useState('')\n  const [zone, setZone] = useState([])\n  const [message, setMessage] = useState('')\n\n  useEffect(() => {\n    fetchZoneInformation(props.setZone)\n\n  }, [props.setZone])\n\n  //  get zone info based on zone id\n  const fetchZoneInformation = (id) => {\n    if (id) {\n      axios.get(`http://localhost:8080/guides/zone-information/${id}`)\n        .then(response => {\n          setZone(response.data)\n        })\n    }\n  }\n\n  //handle on change for entering zip code to get zone\n  const handleOnChange = (e) => {\n    return (\n      setZip({\n        zip: e.target.value\n      })\n    )\n  }\n\n  //validate zip code and handle the save to get the zone number based on zip\n  const handleOnClick = (zip) => {\n    const zipCodeRegex = /^\\d{5}$/\n\n    if (zipCodeRegex.test(zip) == false) {\n      setMessage(\"Please enter a valid zip code\")\n    } else if (zip == '') {\n      alert(\"Please enter a valid zip code\")\n    } else {\n      setMessage('')\n      fetch(`https://phzmapi.org/${zip}.json`)\n        .then(response => response.json())\n        .then(result => {\n          props.updateZone(result.zone)\n          fetchZoneInformation(result.zone)\n        })\n    }\n  }\n\n  console.log(message)\n\n  //handle change to have option to update zone\n  const handleOnChangeGuest = () => {\n    props.notGuest()\n  }\n\n  //maps through zone db information\n  let ZoneItem = zone.map(zone => {\n    return <div className=\"zoneDetails\">\n      <label>Last Frost: {zone.last_frost}</label>\n      <label>First Frost: {zone.first_frost}</label>\n      <label>Avg Extreme Min Temp: {zone.temp}F</label>\n    </div>\n  })\n\n  return (\n    <div className=\"ZoneContainer\">\n      {!props.isGuest ? <div>\n        <h3>Find Your Growing Zone</h3>\n        <p>Enter your zip code to see detailed information about your growing zone</p>\n        <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField name=\"zone\" onChange={handleOnChange} id=\"outlined-basic\" label=\"Zip Code\" variant=\"outlined\" />\n        </form>\n        <Button onClick={() => handleOnClick(zip.zip)} variant=\"contained\" color=\"primary\">\n          Submit\n      </Button>\n      <Message message={message} />\n      </div> : null}\n\n      {props.isGuest ? <div className='zoneNum'>\n        <p>Your Zone is: {props.setZone} </p>\n        {ZoneItem}\n        <Button onClick={handleOnChangeGuest} variant=\"contained\" color=\"primary\">\n          Change Zone\n      </Button>\n      </div> : null}\n\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    setZone: state.zoneReducer.zone,\n    isGuest: state.zoneReducer.isGuest\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateZone: (zone) => dispatch(actionCreators.setZone(zone)),\n    notGuest: () => dispatch(actionCreators.notGuest())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FindZone)","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js",["141","142"],"import React, {useState} from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport {TextField, Button} from '@material-ui/core/'\nimport {NavLink} from \"react-router-dom\"\nimport {connect} from \"react-redux\"\nimport axios from \"axios\"\nimport { setAuthenticationHeader} from '../utils/authHeaders'\nimport * as actionCreators from '../store/actions/actionCreators'\nimport LoginTest from './LoginTest'\n\n//For Material UI\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n})); \n\nfunction Login(props) {\n      //for textboxes & button\n      const classes = useStyles();\n\n    //sets login information proir to sending to db  \n    const [login, setLogin] = useState({})\n\n    //handles chnage events as user inputs login info\n    const handleOnChange = (e) => {\n        setLogin ({\n            ...login,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    //handles log in save to send info to db for verification\n    const handleSubmit = (e) => {\n        if (login.username == '' || login.password == '') {\n            alert(\"Please enter a username and password\")\n            \n        } else {\n        \n        axios.post('http://localhost:8080/login', {\n            data: login         \n        })\n        .then(response => {\n           const token = response.data.token\n           const zone = response.data.zone\n           const garden_name = response.data.garden_name\n           const garden_id = response.data.garden_id\n         \n           if (token) {\n                localStorage.setItem(\"jsonwebtoken\", token)\n                setAuthenticationHeader(token)\n                props.updatePrimaryGarden({garden_name, garden_id})\n                props.updateZone(zone)\n                props.onLogIn()\n                props.history.push(\"/garden\")\n            } else {\n                alert(response.data.message)\n           }\n        })\n        }   \n    }\n\n    return(\n        <div className=\"loginContainer\">\n        <h1>Login</h1>\n        <div>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n                id=\"outlined-secondary\"\n                label=\"Username\"\n                variant=\"outlined\"        \n                name=\"username\"\n                color=\"secondary\"\n                onChange={handleOnChange}\n            />\n            </form>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n                id=\"outlined-password-input\"\n                label=\"Password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                variant=\"outlined\"\n                name=\"password\"\n                color=\"secondary\"\n                onChange={handleOnChange}\n                />\n        </form>\n        </div>\n        <div className={classes.root}>\n            <Button variant=\"contained\" color=\"secondary\" onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n        <b><NavLink to = \"/register\">Don't have an account? Sign Up</NavLink></b>   \n        <LoginTest />\n    </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onLogIn: () => dispatch(actionCreators.loggedIn()),\n        updateZone: (zone) => dispatch(actionCreators.setZone(zone)),\n        updatePrimaryGarden: (garden) => dispatch(actionCreators.setSelectedGarden(garden))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Login)","/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js",["143","144"],"import React, {useState, useEffect} from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Zone from './Zone'\nimport './css/guides.css'\nimport axios from \"axios\";\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }));\n\nfunction Guides(props) {\n\n    //for material ui select\n    const classes = useStyles();\n    \n    const [plant, setPlant] = useState(\"1\")\n    const [guides, setGuides] = useState([])\n    \n    \n    useEffect(() => {\n        fetchGuide(plant)\n    }, [plant])\n \n    //fetch plants from db based on plant id\n    const fetchGuide = (id) => {\n        axios.get(`http://localhost:8080/guides/${id}`)\n        .then(response => {\n            setGuides(response.data)\n        })\n    }\n\n    //map through guides to set layout\n    const guideItem = guides.map(guide => {\n        return <div key={guide.id} className=\"guide\"><b>{guide.vegetable}</b>\n            <div><img src={`./images/${guide.vegetable}.jpeg`}/></div>\n            <label>{guide.description}</label>\n            <label>{guide.description_two}</label>\n            <label>{guide.description_three}</label>\n            <label><b>Days to Maturity:</b> {guide.days_maturity}</label>\n            <label><b>Sow Method:</b> {guide.sow_method}</label>\n            <label><b>Sow Time:</b> {guide.sow_time}</label>\n            <label><b>Plant Spacing:</b> {guide.seed_spacing}</label>\n            <label><b>Spread:</b> {guide.spread}\"</label>\n            <label><b>Height:</b> {guide.height}\"</label>\n            <label><b>Sun Requirements:</b> {guide.sun_req}</label>\n            <label><b>Water Requirements:</b> {guide.water_req}\" per week</label>\n            </div>\n    })\n\n    const handleChange = (event) => {        \n        setPlant(event.target.value)\n    };\n\n    return (\n        <div className='guideContainer'>\n            <h1>Growing Guides</h1>\n            \n            <FormControl className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-label\">Vegetable</InputLabel>\n                <Select onChange={handleChange} labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={plant} >\n                    <MenuItem value=\"1\">Beans</MenuItem>\n                    <MenuItem value=\"2\">Beets</MenuItem>\n                    <MenuItem value=\"3\">Broccoli</MenuItem>\n                    <MenuItem value=\"4\">Cabbage</MenuItem>\n                    <MenuItem value=\"5\">Carrots</MenuItem>\n                    <MenuItem value=\"6\">Cauliflower</MenuItem>            \n                    <MenuItem value=\"8\">Corn</MenuItem>                  \n                    <MenuItem value=\"10\">Cucumbers</MenuItem>\n                    <MenuItem value=\"11\">Eggplant</MenuItem>\n                    <MenuItem value=\"13\">Greens</MenuItem>\n                    <MenuItem value=\"14\">Leeks</MenuItem>\n                    <MenuItem value=\"15\">Melons</MenuItem>\n                    <MenuItem value=\"16\">Okra</MenuItem>        \n                    <MenuItem value=\"20\">Peas</MenuItem>\n                    <MenuItem value=\"21\">Peppers</MenuItem>\n                    <MenuItem value=\"22\">Potatoes</MenuItem>            \n                    <MenuItem value=\"28\">Tomatoes</MenuItem>        \n                </Select>\n            </FormControl>\n        <div>        \n            {guideItem}    \n        </div>\n    \n        </div>\n    )\n}\n\nexport default Guides","/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js",["145","146","147"],"import React, { useState } from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { TextField, Button } from '@material-ui/core/'\nimport Select from '@material-ui/core/Select';\nimport { NavLink } from \"react-router-dom\"\nimport axios from 'axios'\n\n//For Material UI\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\n\nfunction Register(props) {\n\n    //for textboxes & button\n    const classes = useStyles();\n\n    // sets registration information prior to sending to db\n    const [register, setRegister] = useState({ username: '', password: '', zone: '' })\n\n    //handles on change event to user input for reg information\n    const handleOnChange = (e) => {\n        setRegister({\n            ...register,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    //need to ensure all fields are filled out\n\n    //handles the save - sending info to database to create user\n    const handleSubmit = (e) => {\n        if (register.username == '' || register.password == '' || register.zone == '') {\n            alert(\"you must enter a username, password, and growing zone to create an account\")\n        } else {\n            axios.post('http://localhost:8080/register', {\n                data: register\n            }).then(response => {\n                console.log(response)\n                let success = response.data.success\n                if (success) {\n                    props.history.push('/login')\n                } else {\n                    alert(response.data.message)\n                }\n            })\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"loginContainer\">\n                <h1>Register</h1>\n                <div>\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <TextField\n                            id=\"outlined-secondary\"\n                            label=\"Username\"\n                            variant=\"outlined\"\n                            name=\"username\"\n                            onChange={handleOnChange}\n                        />\n                    </form>\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <TextField\n                            id=\"outlined-password-input\"\n                            label=\"Password\"\n                            type=\"password\"\n                            autoComplete=\"current-password\"\n                            variant=\"outlined\"\n                            name=\"password\"\n                            onChange={handleOnChange}\n                        />\n                    </form>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-outlined-label\">Zone</InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label\"\n                            id=\"demo-simple-select-outlined\"\n                            name=\"zone\"\n                            onChange={handleOnChange}\n                            label=\"Zone\"\n                        >\n                            <MenuItem value=\"1a\">1a</MenuItem>\n                            <MenuItem value=\"1b\">1b</MenuItem>\n                            <MenuItem value=\"2a\">2a</MenuItem>\n                            <MenuItem value=\"2b\">2b</MenuItem>\n                            <MenuItem value=\"3a\">3a</MenuItem>\n                            <MenuItem value=\"3b\">3b</MenuItem>\n                            <MenuItem value=\"4a\">4a</MenuItem>\n                            <MenuItem value=\"4b\">4b</MenuItem>\n                            <MenuItem value=\"5a\">5a</MenuItem>\n                            <MenuItem value=\"5b\">5b</MenuItem>\n                            <MenuItem value=\"6a\">6a</MenuItem>\n                            <MenuItem value=\"6b\">6b</MenuItem>\n                            <MenuItem value=\"7a\">7a</MenuItem>\n                            <MenuItem value=\"7b\">7b</MenuItem>\n                            <MenuItem value=\"8a\">8a</MenuItem>\n                            <MenuItem value=\"8b\">8b</MenuItem>\n                            <MenuItem value=\"9a\">9a</MenuItem>\n                            <MenuItem value=\"9b\">9b</MenuItem>\n                            <MenuItem value=\"10a\">10a</MenuItem>\n                            <MenuItem value=\"10b\">10b</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <div>\n                        <b><NavLink to=\"/zone\"> Don't know your zone? Find it here</NavLink></b>\n                    </div>\n                </div>\n                <div className={classes.root}>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n                        Submit\n            </Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Register","/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js",["148"],"import React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nexport default function(ComposedComponent) {\n\n    class Authenticate extends Component {\n        constructor(props) {\n            super(props)\n\n            if (!this.props.isAuth) {\n                this.props.history.push('/login')\n            }\n        }\n        render() {\n            return <ComposedComponent {...this.props} />\n        }\n    }   \n\n    const mapStateToProps = (state) => {\n        return {\n            isAuth: state.isAuth\n        }\n    }\n\n    return connect(mapStateToProps)(Authenticate)\n}","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js",["149","150"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js",["151","152"],"import React, { useState, useEffect } from \"react\";\nimport { connect } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport axios from \"axios\";\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\n\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n}));\n\n\nfunction AddPlant(props) {\n  //for material ui select\n  const classes = useStyles();\n\n  const [newPlant, setNewPlant] = useState({garden_id: props.displayGardenID,\n    plant_name: ''})\n\n  // garden id to plant info onload\n  // useEffect(() => {\n  //   setNewPlant({\n  //     ...newPlant,\n  //     garden_id: props.displayGardenID,\n  //     plant_name: ''\n  //   })\n  // }, [])\n\n  //update local state with information\n  const handleOnChange = (e) => {\n    setNewPlant({\n      ...newPlant,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  // handle change to sow date\n  const handleSowChange = (date) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setNewPlant({\n      ...newPlant,\n      sow_date: date\n    })\n  };\n\n  // handle change to planting date\n  const handlePlantingChange = (date) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setNewPlant({\n      ...newPlant,\n      planting_date: date\n    })\n  };\n\n  //save new plant to db\n  const onSaveToGarden = (plant) => {\n    if (newPlant.plant_name == '') {\n      alert('You must enter a plant variety')\n    } else {\n      axios.post('http://localhost:8080/garden/save-new',\n        {\n          data: newPlant\n        })\n        .then(response => {\n\n          let success = response.data.success\n\n          if (success) {\n            props.history.push('/garden')\n          } else {\n            console.log(\"did not update\")\n          }\n        })\n    }\n  }\n\n  return (\n    <div>\n      <p>Add Plant</p>\n      <div>\n        <TextField onChange={handleOnChange} name=\"plant_name\" value={newPlant.plant_name} id=\"standard-search\" label=\"Variety\" type=\"text\" />\n      </div>\n      <div>\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"demo-simple-select-label\">Family</InputLabel>\n          <Select onChange={handleOnChange} labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" name=\"plant_family\" value={newPlant.plant_family} >\n            <MenuItem value=\"beans\">Beans</MenuItem>\n            <MenuItem value=\"beets\">Beets</MenuItem>\n            <MenuItem value=\"broccoli\">Broccoli</MenuItem>\n            <MenuItem value=\"cabbage\">Cabbage</MenuItem>\n            <MenuItem value=\"carrots\">Carrots</MenuItem>\n            <MenuItem value=\"cauliflower\">Cauliflower</MenuItem>\n            <MenuItem value=\"celery\">Celery</MenuItem>\n            <MenuItem value=\"corn\">Corn</MenuItem>\n            <MenuItem value=\"cowpeas\">Cowpeas</MenuItem>\n            <MenuItem value=\"cucumbers\">Cucumbers</MenuItem>\n            <MenuItem value=\"eggplant\">Eggplant</MenuItem>\n            <MenuItem value=\"greens\">Greens</MenuItem>\n            <MenuItem value=\"leeks\">Leeks</MenuItem>\n            <MenuItem value=\"melons\">Melons</MenuItem>\n            <MenuItem value=\"okra\">Okra</MenuItem>\n            <MenuItem value=\"peanuts\">Peanuts</MenuItem>\n            <MenuItem value=\"peas\">Peas</MenuItem>\n            <MenuItem value=\"peppers\">Peppers</MenuItem>\n            <MenuItem value=\"potatoes\">Potatoes</MenuItem>\n            <MenuItem value=\"summer squash\">Summer Squash</MenuItem>\n            <MenuItem value=\"winter squash\">Winter Squash</MenuItem>\n            <MenuItem value=\"sweet potatoes\">Sweet Potatoes</MenuItem>\n            <MenuItem value=\"tomatoes\">Tomatoes</MenuItem>\n          </Select>\n        </FormControl>\n        <TextField onChange={handleOnChange} name=\"quantity\" value={newPlant.quantity} id=\"standard-search\" label=\"Quantity\" type=\"text\" />\n        <TextField onChange={handleOnChange} name=\"company\" id=\"standard-search\" label=\"Company\" type=\"text\" value={newPlant.company} />\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"demo-simple-select-label\">Start From</InputLabel>\n          <Select onChange={handleOnChange} labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" name=\"type\" value={newPlant.type} >\n            <MenuItem value=\"seed\">Seed</MenuItem>\n            <MenuItem value=\"plant\">Plant</MenuItem>\n            <MenuItem value=\"sets\">Sets</MenuItem>\n            <MenuItem value=\"slips\">Slips</MenuItem>\n          </Select>\n        </FormControl>\n\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Grid container justify=\"space-around\">\n            <KeyboardDatePicker\n              margin=\"normal\"\n              id=\"date-picker-dialog\"\n              label=\"Sow Date\"\n              format=\"MM/dd/yyyy\"\n              name=\"sow_date\"\n              value={newPlant.sow_date}\n              onChange={handleSowChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n            />\n          </Grid>\n        </MuiPickersUtilsProvider>\n\n\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Grid container justify=\"space-around\">\n            <KeyboardDatePicker\n              margin=\"normal\"\n              id=\"date-picker-dialog\"\n              label=\"Plant Outside\"\n              format=\"MM/dd/yyyy\"\n              name=\"planting_date\"\n              value={newPlant.planting_date}\n              onChange={handlePlantingChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n            />\n          </Grid>\n        </MuiPickersUtilsProvider>\n      </div>\n      <div>\n        <button onClick={() => onSaveToGarden(newPlant)}>Save</button>\n      </div>\n    </div>\n\n\n  );\n}\n\nconst mapStatesToProps = (state) => {\n  return {\n    displayGardenID: state.gardenReducer.primary_garden\n  }\n}\n\nexport default connect(mapStatesToProps)(AddPlant)","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js",["153"],"import GardenTable from './GardenTable'\nimport ChooseGarden from './ChooseGarden'\nimport AddGarden from './AddGarden'\nimport {connect} from 'react-redux'\nimport axios from 'axios'\nimport { useEffect } from 'react'\n\n\nfunction DisplayGarden(props) {\n\n    useEffect(() => {\n        fetchPrimaryGarden()\n    }, [])\n\n    const fetchPrimaryGarden = () => {\n    // axios.get('http://localhost:8080/garden/fetch-primary')\n    // .then(response => {\n    //     console.log(response)\n    //     // let name = response.data.primary.garden_name\n    //     // let value = response.data.primary.garden_id\n\n    //     // props.onSetGardenDefault({garden_name: name, garden_id: value})\n    // })\n\n    }\n\n    return(\n        <div>\n            <ChooseGarden />\n            <AddGarden />\n            <GardenTable />\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSetGardenDefault: (garden) => dispatch({type: 'SET_GARDEN', payload: garden}),\n    }\n} \n\nexport default connect(null, mapDispatchToProps)(DisplayGarden)","/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js",["154","155","156"],"import { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport DeletePlant from \"./DeletePlant\";\nimport history from '.././utils/history'\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n}));\n\n\nfunction PlantDetails(props) {\n  //for material ui select\n  const classes = useStyles();\n\n  const [plantDetails, setPlantDetails] = useState([])\n  let id = props.match.params.id\n\n  useEffect(() => {\n    let id = props.match.params.id\n    fetchPlantDetails(id)\n\n  }, [])\n\n  const fetchPlantDetails = (id) => {\n    axios.get(`http://localhost:8080/garden/plant/${id}`)\n      .then(response => {\n        setPlantDetails(response.data[0])\n      })\n\n  }\n\n  const handleOnChange = (e) => {\n    setPlantDetails({\n      ...plantDetails,\n      [e.target.name]: e.target.value\n    })\n\n  }\n\n    // handle change to sow date\n    const handleSowChange = (date) => {\n      date.setDate(date.getDate())\n      console.log(date)\n      setPlantDetails({\n        ...plantDetails,\n        sow_date: date\n      })\n    };\n\n  // handle change to planting date\n  const handlePlantingChange = (date) => {\n    date.setDate(date.getDate())\n    console.log(date)\n    setPlantDetails({\n      ...plantDetails,\n      planting_date: date\n    })\n  };\n\n  // handle change to first harvest date\n  const handleFirstHarvestChange = (date) => {\n    date.setDate(date.getDate())\n       setPlantDetails({\n      ...plantDetails,\n      first_harvest: date\n    })\n  };\n\n  // handle change to last harvest date\n  const handleLastHarvestChange = (date, e) => {\n    date.setDate(date.getDate())\n      setPlantDetails({\n      ...plantDetails,\n      last_harvest: date\n    })\n  };\n\n  const handleSave = () => {\n    axios.post('http://localhost:8080/garden/save-edit',\n      {\n        data: plantDetails\n      })\n      .then(response => {\n\n        let success = response.data.success\n\n        if (success) {\n          props.history.push('/garden')\n        } else {\n          console.log(\"did not update\")\n        }\n      })\n  }\n\n  // const handleDelete = () => {\n  //   let id = props.match.params.id\n  //   axios.delete(`http://localhost:8080/garden/delete-plant/${id}`)\n  //     .then(response => {\n\n  //       let success = response.data.success\n\n  //       if (success) {\n  //         props.history.push('/garden')\n  //       } else {\n  //         console.log(\"did not update\")\n  //       }\n  //     })\n  // }\n\n  return (\n    <div>\n      <p>Plant Details</p>\n\n      <label> Plant: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.plant_name} name=\"plant_name\" type=\"text\" /> </label>\n      <label> Plant Family: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.plant_family} name=\"plant_family\" type=\"text\" /> </label>\n      <label> Start From: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.type} name=\"type\" type=\"text\" /> </label>\n      <label> Quantity: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.quantity} name=\"quantity\" type=\"text\" /> </label>\n      <label> Supplier: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.company} name=\"company\" type=\"text\" /> </label>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Sow Date\"\n            format=\"MM/dd/yyyy\"\n            name=\"sow_date\"\n            value={plantDetails.sow_date}\n            onChange={handleSowChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Plant Outside\"\n            format=\"MM/dd/yyyy\"\n            name=\"planting_date\"\n            value={plantDetails.planting_date}\n            onChange={handlePlantingChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"First Harvest\"\n            format=\"MM/dd/yyyy\"\n            name=\"first_harvest\"\n            value={plantDetails.first_harvest}\n            onChange={handleFirstHarvestChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Grid container justify=\"space-around\">\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Last Harvest\"\n            format=\"MM/dd/yyyy\"\n            name=\"last_harvest\"\n            value={plantDetails.last_harvest}\n            onChange={handleLastHarvestChange}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n      </MuiPickersUtilsProvider>\n\n      <label> Notes: <TextField onChange={handleOnChange} id=\"standard-search\" value={plantDetails.notes} name=\"notes\" type=\"text\" /> </label>\n\n      <button onClick={handleSave}>Save Changes</button>\n\n      {/* <button onClick={handleDelete}>Delete</button> */}\n      <DeletePlant id={id} />\n\n    </div>\n  )\n}\n\nexport default PlantDetails","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddGarden.js",["157","158","159"],"import { useState } from 'react'\nimport axios from 'axios'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux'\nimport * as actionTypes from '../store/actions/actionTypes'\nimport * as actionCreators from '../store/actions/actionCreators'\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n}));\n\nfunction AddGarden(props) {\n  //for material ui select\n  const classes = useStyles();\n\n  const [name, setName] = useState({})\n\n  const saveNewGarden = () => {\n    if (name.garden_name == '') {\n      alert(\"Please enter the name of your garden\")\n    } else {\n      axios.post('http://localhost:8080/garden/new-garden',\n        {\n          data: name\n        })\n        .then(response => {\n\n          let success = response.data.success\n\n          if (success) {\n            //reload display gardens        \n            props.updateDisplayGarden(name)      \n            setName({\n              ...name,\n              garden_name: ''\n            })\n          } else {\n            console.log(\"did not update\")\n          }\n        })\n    }\n  }\n\n  const handleOnChange = (e) => {\n    setName({\n      ...name,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  return (\n    <div>\n      <p>create a new garden</p>\n      <TextField onChange={handleOnChange} name=\"garden_name\" value={name.garden_name} id=\"standard-search\" label=\"Garden Name\" type=\"text\" />\n      <Button onClick={saveNewGarden} variant=\"contained\" color=\"primary\" href=\"#contained-buttons\">\n        Save\n      </Button>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateDisplayGarden: (name) => dispatch(actionCreators.updateDisplay(name))\n  }\n\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddGarden)","/Users/katydonoghue/Desktop/garden-app/client/src/utils/history.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/DeleteGarden.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/DeletePlant.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/SetPrimaryGarden.js",["160","161","162"],"import axios from \"axios\";\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\n\n//for material ui\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n  }));\n  \n\nfunction setPrimaryGarden(props) {\n\n    // //for material ui\n    // const classes = useStyles();\n\n    const updatePrimaryGarden = (id, name) => {\n\n        console.log(id)\n        axios.post('http://localhost:8080/garden/set-primary', {\n            data: {\n                garden_id: id,\n                garden_name: name\n            }\n        }).then(response => {\n            if (response.data.success) {\n                alert(\"Your primary garden has been set\")\n            } else {\n                alert(\"Your primary garden did not save\")\n            }\n        })\n\n    }\n\n    return (\n        <div>\n        {/* <IconButton onClick={() => updatePrimaryGarden(props.id, props.name)} aria-label=\"delete\" disabled color=\"primary\">\n            <FavoriteIcon />\n        </IconButton> */}\n        <button onClick={() => updatePrimaryGarden(props.id, props.name)}>Set Primary Garden</button>\n        </div>\n    )\n\n}\n\n\n\nexport default setPrimaryGarden","/Users/katydonoghue/Desktop/garden-app/client/src/components/Logout.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionCreators.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/authenticated.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/garden.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducers/zone.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/LoginTest.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Message.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTableMobile.js",["163","164"],{"ruleId":"165","severity":1,"message":"166","line":18,"column":8,"nodeType":"167","messageId":"168","endLine":18,"endColumn":19},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"165","severity":1,"message":"173","line":17,"column":9,"nodeType":"167","messageId":"168","endLine":17,"endColumn":16},{"ruleId":"174","severity":1,"message":"175","line":56,"column":32,"nodeType":"176","messageId":"177","endLine":56,"endColumn":34},{"ruleId":"174","severity":1,"message":"175","line":58,"column":20,"nodeType":"176","messageId":"177","endLine":58,"endColumn":22},{"ruleId":"174","severity":1,"message":"175","line":38,"column":28,"nodeType":"176","messageId":"177","endLine":38,"endColumn":30},{"ruleId":"174","severity":1,"message":"175","line":38,"column":52,"nodeType":"176","messageId":"177","endLine":38,"endColumn":54},{"ruleId":"165","severity":1,"message":"178","line":7,"column":8,"nodeType":"167","messageId":"168","endLine":7,"endColumn":12},{"ruleId":"179","severity":1,"message":"180","line":46,"column":18,"nodeType":"181","endLine":46,"endColumn":65},{"ruleId":"174","severity":1,"message":"175","line":49,"column":31,"nodeType":"176","messageId":"177","endLine":49,"endColumn":33},{"ruleId":"174","severity":1,"message":"175","line":49,"column":58,"nodeType":"176","messageId":"177","endLine":49,"endColumn":60},{"ruleId":"174","severity":1,"message":"175","line":49,"column":81,"nodeType":"176","messageId":"177","endLine":49,"endColumn":83},{"ruleId":"182","severity":1,"message":"183","line":4,"column":1,"nodeType":"184","endLine":26,"endColumn":2},{"ruleId":"165","severity":1,"message":"185","line":5,"column":8,"nodeType":"167","messageId":"168","endLine":5,"endColumn":14},{"ruleId":"165","severity":1,"message":"186","line":7,"column":8,"nodeType":"167","messageId":"168","endLine":7,"endColumn":15},{"ruleId":"165","severity":1,"message":"187","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":36},{"ruleId":"174","severity":1,"message":"175","line":82,"column":29,"nodeType":"176","messageId":"177","endLine":82,"endColumn":31},{"ruleId":"165","severity":1,"message":"188","line":5,"column":8,"nodeType":"167","messageId":"168","endLine":5,"endColumn":13},{"ruleId":"165","severity":1,"message":"186","line":10,"column":8,"nodeType":"167","messageId":"168","endLine":10,"endColumn":15},{"ruleId":"165","severity":1,"message":"173","line":33,"column":9,"nodeType":"167","messageId":"168","endLine":33,"endColumn":16},{"ruleId":"189","severity":1,"message":"190","line":42,"column":6,"nodeType":"191","endLine":42,"endColumn":8,"suggestions":"192"},{"ruleId":"165","severity":1,"message":"193","line":6,"column":13,"nodeType":"167","messageId":"168","endLine":6,"endColumn":24},{"ruleId":"165","severity":1,"message":"173","line":28,"column":9,"nodeType":"167","messageId":"168","endLine":28,"endColumn":16},{"ruleId":"174","severity":1,"message":"175","line":33,"column":26,"nodeType":"176","messageId":"177","endLine":33,"endColumn":28},{"ruleId":"165","severity":1,"message":"194","line":2,"column":8,"nodeType":"167","messageId":"168","endLine":2,"endColumn":20},{"ruleId":"165","severity":1,"message":"195","line":4,"column":8,"nodeType":"167","messageId":"168","endLine":4,"endColumn":18},{"ruleId":"165","severity":1,"message":"196","line":7,"column":7,"nodeType":"167","messageId":"168","endLine":7,"endColumn":16},{"ruleId":"165","severity":1,"message":"197","line":8,"column":8,"nodeType":"167","messageId":"168","endLine":8,"endColumn":17},{"ruleId":"165","severity":1,"message":"198","line":9,"column":8,"nodeType":"167","messageId":"168","endLine":9,"endColumn":18},"no-unused-vars","'requireAuth' is defined but never used.","Identifier","unusedVar","no-native-reassign",["199"],"no-negated-in-lhs",["200"],"'classes' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Zone' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Button' is defined but never used.","'history' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["201"],"'actionTypes' is defined but never used.","'FavoriteIcon' is defined but never used.","'IconButton' is defined but never used.","'useStyles' is assigned a value but never used.","'InboxIcon' is defined but never used.","'DraftsIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},"Update the dependencies array to be: [props.match.params.id]",{"range":"204","text":"205"},[1025,1027],"[props.match.params.id]"]