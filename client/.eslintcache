[{"/Users/katydonoghue/Desktop/garden-app/client/src/index.js":"1","/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js":"2","/Users/katydonoghue/Desktop/garden-app/client/src/App.js":"3","/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js":"4","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js":"5","/Users/katydonoghue/Desktop/garden-app/client/src/components/Tasks.js":"6","/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js":"7","/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js":"8","/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js":"9","/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js":"10","/Users/katydonoghue/Desktop/garden-app/client/src/store/reducer.js":"11","/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js":"12","/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js":"13","/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js":"14","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js":"15","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js":"16","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js":"17","/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js":"18","/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js":"19","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddGarden.js":"20","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddTasks.js":"21","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayTasks.js":"22","/Users/katydonoghue/Desktop/garden-app/client/src/components/EditTask.js":"23","/Users/katydonoghue/Desktop/garden-app/client/src/utils/history.js":"24","/Users/katydonoghue/Desktop/garden-app/client/src/components/DeleteGarden.js":"25","/Users/katydonoghue/Desktop/garden-app/client/src/components/DeletePlant.js":"26","/Users/katydonoghue/Desktop/garden-app/client/src/components/SetPrimaryGarden.js":"27","/Users/katydonoghue/Desktop/garden-app/client/src/components/Logout.js":"28"},{"size":2861,"mtime":1607794542372,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1607380517237,"results":"31","hashOfConfig":"30"},{"size":1363,"mtime":1607696291789,"results":"32","hashOfConfig":"30"},{"size":2519,"mtime":1607723211877,"results":"33","hashOfConfig":"30"},{"size":3181,"mtime":1607723211876,"results":"34","hashOfConfig":"30"},{"size":228,"mtime":1607707079557,"results":"35","hashOfConfig":"30"},{"size":184,"mtime":1607447440925,"results":"36","hashOfConfig":"30"},{"size":4061,"mtime":1607794542370,"results":"37","hashOfConfig":"30"},{"size":5325,"mtime":1607723211876,"results":"38","hashOfConfig":"30"},{"size":2543,"mtime":1607796956144,"results":"39","hashOfConfig":"30"},{"size":1624,"mtime":1607796782963,"results":"40","hashOfConfig":"30"},{"size":37,"mtime":1607463833758,"results":"41","hashOfConfig":"30"},{"size":249,"mtime":1607463833760,"results":"42","hashOfConfig":"30"},{"size":587,"mtime":1607463833756,"results":"43","hashOfConfig":"30"},{"size":2941,"mtime":1607794542370,"results":"44","hashOfConfig":"30"},{"size":6474,"mtime":1607794542369,"results":"45","hashOfConfig":"30"},{"size":1039,"mtime":1607794542370,"results":"46","hashOfConfig":"30"},{"size":2845,"mtime":1607723211874,"results":"47","hashOfConfig":"30"},{"size":6228,"mtime":1607794542371,"results":"48","hashOfConfig":"30"},{"size":1821,"mtime":1607723211874,"results":"49","hashOfConfig":"30"},{"size":3236,"mtime":1607614241019,"results":"50","hashOfConfig":"30"},{"size":5129,"mtime":1607722995255,"results":"51","hashOfConfig":"30"},{"size":3339,"mtime":1607626020574,"results":"52","hashOfConfig":"30"},{"size":86,"mtime":1607794542373,"results":"53","hashOfConfig":"30"},{"size":1285,"mtime":1607794542369,"results":"54","hashOfConfig":"30"},{"size":1415,"mtime":1607794542369,"results":"55","hashOfConfig":"30"},{"size":1291,"mtime":1607794542372,"results":"56","hashOfConfig":"30"},{"size":472,"mtime":1607796700270,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"mtuggw",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/katydonoghue/Desktop/garden-app/client/src/index.js",["125"],"/Users/katydonoghue/Desktop/garden-app/client/src/reportWebVitals.js",[],["126","127"],"/Users/katydonoghue/Desktop/garden-app/client/src/App.js",["128"],"\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport greenhouse from './components/images/greenhouse.png'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"appContainer\">\n        <div className=\"imageContainer\">\n          <img src={greenhouse} alt=\"greenhouse\" className=\"image\" />\n        </div>\n        <div className=\"textContainer\">\n          <h2>Headline here</h2>\n          <p>lots of copy here</p>\n          <p> and here</p>\n          <p>and here</p>\n          <div className='buttonContainer'>\n            <div className=\"buttonItem\">\n              <Button className=\"button\" variant=\"contained\" color=\"primary\" href=\"/register\"> Sign Up </Button>\n            </div>\n            <div className=\"buttonItem\">\n              <Button className=\"button\" variant=\"contained\" color=\"primary\" href=\"/login\"> LogIn </Button>\n            </div>\n            <div className=\"buttonItem\">\n              <Button className=\"button\" variant=\"contained\" color=\"primary\" href=\"/guides\"> Go to the Guides </Button>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/katydonoghue/Desktop/garden-app/client/src/components/Zone.js",["129"],"import React, { useState, useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport axios from \"axios\"\n\nfunction FindZone(props) {\n\n  const [zip, setZip] = useState()\n  const [zone, setZone] = useState([])\n\n  useEffect(() => {\n    fetchZoneInformation(props.setZone)\n\n  }, [props.setZone])\n\n  //  get zone info based on zone id\n  const fetchZoneInformation = (id) => {\n    if (id) {\n      axios.get(`http://localhost:8080/guides/zone-information/${id}`)\n      .then(response => {\n        setZone(response.data)\n      })\n    }\n  }\n\n  //handle on change for entering zip code to get zone\n  const handleOnChange = (e) => {\n    return (\n      setZip({\n        zip: e.target.value\n      })\n    )\n  }\n\n  //validate zip code and handle the save to get the zone number based on zip\n  const handleOnClick = (zip) => {\n    const zipCodeRegex = /^\\d{5}$/\n\n    if (zipCodeRegex.test(zip) == false) {\n      alert(\"Please enter a valid zip code\")\n    } else {\n      fetch(`https://phzmapi.org/${zip}.json`)\n        .then(response => response.json())\n        .then(result => {\n          props.updateZone(result.zone)\n          fetchZoneInformation(result.zone)\n        })\n    }\n  }\n\n  //handle change to have option to update zone\n  const handleOnChangeGuest = () => {\n    props.notGuest()\n  }\n\n  //maps through zone db information\n  let ZoneItem = zone.map(zone => {\n    return <div>\n      <label>Last Frost: {zone.last_frost}</label>\n      <label>First Frost: {zone.first_frost}</label>\n      <label>Avg Extreme Min Temp: {zone.temp}F</label>\n    </div>\n  })\n\n  return (\n    <div className=\"ZoneContainer\">\n      {!props.isGuest ? <div>\n        <h3>Find Your Growing Zone</h3>\n        <p>Enter your zip code to see detailed information about your growing zone</p>\n        <input type=\"text\" placeholder=\"Enter Zip Code\" name=\"zone\" onChange={handleOnChange} />\n        <button onClick={() => handleOnClick(zip.zip)}>Submit</button>\n      </div> : null}\n\n      {props.isGuest ? <div>\n        <p>Your Zone is: {props.setZone} </p>\n        {ZoneItem}\n\n        <button onClick={handleOnChangeGuest}>Change Zones</button>\n      </div> : null}\n\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    setZone: state.zone,\n    isGuest: state.isGuest\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateZone: (zone) => dispatch({ type: 'SET_ZONE', payload: zone }),\n    notGuest: () => dispatch({ type: 'NOT_GUEST' })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FindZone)","/Users/katydonoghue/Desktop/garden-app/client/src/components/Login.js",["130","131"],"import React, {useState} from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport {TextField, Button} from '@material-ui/core/'\nimport {NavLink} from \"react-router-dom\"\nimport {connect} from \"react-redux\"\nimport * as actionTypes from \"../store/actions/actionTypes\"\nimport axios from \"axios\"\nimport { setAuthenticationHeader} from '../utils/authHeaders'\n\n\n//For Material UI\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n})); \n\nfunction Login(props) {\n      //for textboxes & button\n      const classes = useStyles();\n\n    //sets login information proir to sending to db  \n    const [login, setLogin] = useState({})\n\n    //handles chnage events as user inputs login info\n    const handleOnChange = (e) => {\n        setLogin ({\n            ...login,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    //handles log in save to send info to db for verification\n    const handleSubmit = (e) => {\n        if (login.username == '' || login.password == '') {\n            alert(\"Please enter a username and password\")\n        } else {\n        \n        axios.post('http://localhost:8080/login', {\n            data: login         \n        })\n        .then(response => {\n                        \n           const token = response.data.token\n           const zone = response.data.zone\n         \n           if (token) {\n                localStorage.setItem(\"jsonwebtoken\", token)\n                setAuthenticationHeader(token)\n                props.updateZone(zone)\n                props.onLogIn()\n                props.history.push(\"/\")\n            } else {\n                alert(response.data.message)\n           }\n        })\n        }   \n    }\n\n    return(\n        <div className=\"loginContainer\">\n        <h1>Login</h1>\n        <div>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n                id=\"outlined-secondary\"\n                label=\"Username\"\n                variant=\"outlined\"        \n                name=\"username\"\n                color=\"secondary\"\n                onChange={handleOnChange}\n            />\n            </form>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n                id=\"outlined-password-input\"\n                label=\"Password\"\n                type=\"password\"\n                autoComplete=\"current-password\"\n                variant=\"outlined\"\n                name=\"password\"\n                color=\"secondary\"\n                onChange={handleOnChange}\n                />\n        </form>\n        </div>\n        <div className={classes.root}>\n            <Button variant=\"contained\" color=\"secondary\" onClick={handleSubmit}>\n                Submit\n            </Button>\n        </div>\n        <b><NavLink to = \"/register\">Register For An Account</NavLink></b>\n    </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onLogIn: () => dispatch({type: actionTypes.LOGGED_IN}),\n        updateZone: (zone) => dispatch({type: 'SET_ZONE', payload: zone})\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Login)","/Users/katydonoghue/Desktop/garden-app/client/src/components/Tasks.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/BaseLayout.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Guides.js",["132"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Register.js",["133","134","135"],"import React, { useState } from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { TextField, Button } from '@material-ui/core/'\nimport Select from '@material-ui/core/Select';\nimport { NavLink } from \"react-router-dom\"\nimport axios from 'axios'\n\n//For Material UI\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\n\nfunction Register(props) {\n\n    //for textboxes & button\n    const classes = useStyles();\n\n    // sets registration information prior to sending to db\n    const [register, setRegister] = useState({ username: '', password: '', zone: '' })\n\n    //handles on change event to user input for reg information\n    const handleOnChange = (e) => {\n        setRegister({\n            ...register,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    //need to ensure all fields are filled out\n\n    //handles the save - sending info to database to create user\n    const handleSubmit = (e) => {\n        if (register.username == '' || register.password == '' || register.zone == '') {\n            alert(\"you must enter a username, password, and growing zone to create an account\")\n        } else {\n            axios.post('http://localhost:8080/register', {\n                data: register\n            }).then(response => {\n                console.log(response)\n                let success = response.data.success\n                if (success) {\n                    props.history.push('/login')\n                } else {\n                    alert(response.data.message)\n                }\n            })\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"loginContainer\">\n                <h1>Register</h1>\n                <div>\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <TextField\n                            id=\"outlined-secondary\"\n                            label=\"Username\"\n                            variant=\"outlined\"\n                            name=\"username\"\n                            onChange={handleOnChange}\n                        />\n                    </form>\n                    <form className={classes.root} noValidate autoComplete=\"off\">\n                        <TextField\n                            id=\"outlined-password-input\"\n                            label=\"Password\"\n                            type=\"password\"\n                            autoComplete=\"current-password\"\n                            variant=\"outlined\"\n                            name=\"password\"\n                            onChange={handleOnChange}\n                        />\n                    </form>\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-outlined-label\">Zone</InputLabel>\n                        <Select\n                            labelId=\"demo-simple-select-outlined-label\"\n                            id=\"demo-simple-select-outlined\"\n                            name=\"zone\"\n                            onChange={handleOnChange}\n                            label=\"Zone\"\n                        >\n                            <MenuItem value=\"1a\">1a</MenuItem>\n                            <MenuItem value=\"1b\">1b</MenuItem>\n                            <MenuItem value=\"2a\">2a</MenuItem>\n                            <MenuItem value=\"2b\">2b</MenuItem>\n                            <MenuItem value=\"3a\">3a</MenuItem>\n                            <MenuItem value=\"3b\">3b</MenuItem>\n                            <MenuItem value=\"4a\">4a</MenuItem>\n                            <MenuItem value=\"4b\">4b</MenuItem>\n                            <MenuItem value=\"5a\">5a</MenuItem>\n                            <MenuItem value=\"5b\">5b</MenuItem>\n                            <MenuItem value=\"6a\">6a</MenuItem>\n                            <MenuItem value=\"6b\">6b</MenuItem>\n                            <MenuItem value=\"7a\">7a</MenuItem>\n                            <MenuItem value=\"7b\">7b</MenuItem>\n                            <MenuItem value=\"8a\">8a</MenuItem>\n                            <MenuItem value=\"8b\">8b</MenuItem>\n                            <MenuItem value=\"9a\">9a</MenuItem>\n                            <MenuItem value=\"9b\">9b</MenuItem>\n                            <MenuItem value=\"10a\">10a</MenuItem>\n                            <MenuItem value=\"10b\">10b</MenuItem>\n                        </Select>\n                    </FormControl>\n                    <div>\n                        <b><NavLink to=\"/zone\"> Don't know your zone? Find it here</NavLink></b>\n                    </div>\n                </div>\n                <div className={classes.root}>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\n                        Submit\n            </Button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Register","/Users/katydonoghue/Desktop/garden-app/client/src/components/Menu.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/reducer.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/store/actions/actionTypes.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/utils/authHeaders.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/requireAuth.js",["136"],"import React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nexport default function(ComposedComponent) {\n\n    class Authenticate extends Component {\n        constructor(props) {\n            super(props)\n\n            if (!this.props.isAuth) {\n                this.props.history.push('/login')\n            }\n        }\n        render() {\n            return <ComposedComponent {...this.props} />\n        }\n    }   \n\n    const mapStateToProps = (state) => {\n        return {\n            isAuth: state.isAuth\n        }\n    }\n\n    return connect(mapStateToProps)(Authenticate)\n}","/Users/katydonoghue/Desktop/garden-app/client/src/components/GardenTable.js",["137","138"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/AddPlant.js",["139","140"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayGarden.js",["141"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/ChooseGarden.js",["142"],"import {useEffect} from 'react'\nimport axios from 'axios'\nimport {connect} from 'react-redux'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n//For Material UI\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  })); \n\nfunction ChooseGarden(props) {\n\n    //for material ui\n    const classes = useStyles();\n\n    // const [gardens, setGardens] = useState([])\n    // const [gardenName, setGardenName] = useState({})\n\n    useEffect(() => {\n        displayGardenOptions()\n    }, [props.updateGardens])\n\n\n    //get all garden options\n    const displayGardenOptions = () => {\n        axios.get('http://localhost:8080/garden/list-gardens')\n        .then(response => {\n            // setGardens(response.data)\n            props.onSetGardenList(response.data)\n        })\n    }\n\n    const handleOnChange = (name, value) => {\n        props.onSetGardenDefault({garden_name: name, garden_id: value})\n    }\n\n    //map through gardens and add them to drop down variables\n    // const gardenList = gardens.map(garden => {\n    const gardenList = props.displayGardenList.map(garden => {    \n        return <MenuItem onClick={() => handleOnChange(garden.garden_name, garden.id)} name={garden.garden_name} value={garden.id} key={garden.id}>{garden.garden_name}</MenuItem>\n    })\n\n\n    //display\n        return (\n        <div>\n           <FormControl variant=\"outlined\" className={classes.formControl}>\n                <InputLabel id=\"demo-simple-select-outlined-label\">Garden</InputLabel>\n                <Select labelId=\"demo-simple-select-outlined-label\" id=\"demo-simple-select-outlined\" label=\"garden\">\n                    {gardenList}\n                </Select>\n            </FormControl>\n        </div>\n    )\n}\n\nconst mapStatesToProps = (state) => {\n    return {\n        // displayGardenDefault: state.primary_garden,\n        displayGardenList: state.garden_list,\n        // update gardens propts the list to update after adding new garden\n        updateGardens: state.new_garden\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSetGardenDefault: (garden) => dispatch({type: 'SET_GARDEN', payload: garden}),\n        onSetGardenList: (gardenList) => dispatch({type: 'SET_GARDEN_LIST', payload: gardenList })\n        // onSetZoneDefault: (zone) => dispatch({type: 'SET_ZONE', payload: zone})         \n    }\n}\n\nexport default connect(mapStatesToProps, mapDispatchToProps)(ChooseGarden)","/Users/katydonoghue/Desktop/garden-app/client/src/components/PlantDetails.js",["143","144","145"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/AddGarden.js",["146","147"],"import { useState } from 'react'\nimport axios from 'axios'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux'\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n}));\n\nfunction AddGarden(props) {\n  //for material ui select\n  const classes = useStyles();\n\n  const [name, setName] = useState({})\n\n  const saveNewGarden = () => {\n    if (name.garden_name == '') {\n      alert(\"Please enter the name of your garden\")\n    } else {\n      axios.post('http://localhost:8080/garden/new-garden',\n        {\n          data: name\n        })\n        .then(response => {\n\n          let success = response.data.success\n\n          if (success) {\n            //reload display gardens        \n            props.updateDisplayGarden(name)      \n            setName({\n              ...name,\n              garden_name: ''\n            })\n          } else {\n            console.log(\"did not update\")\n          }\n        })\n    }\n  }\n\n  const handleOnChange = (e) => {\n    setName({\n      ...name,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  return (\n    <div>\n      <p>create a new garden</p>\n      <TextField onChange={handleOnChange} name=\"garden_name\" value={name.garden_name} id=\"standard-search\" label=\"Garden Name\" type=\"text\" />\n      <button onClick={saveNewGarden}>Save</button>\n      \n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateDisplayGarden: (name) => dispatch({ type: \"UPDATE_GARDEN\", payload: name })\n  }\n\n}\n\n\nexport default connect(null, mapDispatchToProps)(AddGarden)","/Users/katydonoghue/Desktop/garden-app/client/src/components/AddTasks.js",["148"],"import React, { useState } from \"react\";\n// import {connect} from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles';\n// import InputLabel from '@material-ui/core/InputLabel';\n// import MenuItem from '@material-ui/core/MenuItem';\n// import FormControl from '@material-ui/core/FormControl';\n// import Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\nimport axios from \"axios\";\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  }\n  }));\n\n\nfunction AddTasks(props) {\n    //for material ui select\n    const classes = useStyles();\n\n    const [task, setTask] = useState({})\n\n     \n    //update with information\n    const handleOnChange = (e) => {\n        setTask({...task,\n          [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSetDate = (date) => {\n        date.setDate(date.getDate())\n        console.log(date)\n        setTask({\n          ...task,\n            task_date: date\n        })\n      };\n\n    const onSaveTasks= (task) => {\n      axios.post('http://localhost:8080/tasks/add-task',\n        {\n          data: task\n        })\n        .then(response => {let success = response.data.success\n\n          if (success) {\n           \n           console.log(\"Success\") \n           setTask({\n               task_name: '',\n               task_description: ''      \n            })\n          } else {\n              console.log(\"did not update\")\n              }\n          })    \n    }\n\n    \n\n      return (\n        <div>\n            <p>Add Task</p>\n            <div>\n            <TextField onChange={handleOnChange} name=\"task_name\" value={task.task_name} id=\"standard-search\" label=\"Task\" type=\"text\" />\n            </div>\n            <div>                 \n            <TextField onChange={handleOnChange} name=\"task_description\" value={task.task_description} id=\"standard-textarea\" label=\"Description\" placeholder=\"Description\" multiline />\n            </div>\n            <div>                  \n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Date\"\n                    format=\"MM/dd/yyyy\"\n                    name=\"task_date\"\n                    value={task.task_date}\n                    onChange={handleSetDate}\n                    KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                    }}\n                />\n                </Grid>\n            </MuiPickersUtilsProvider>\n            </div>\n              <div>\n                <button onClick={() => onSaveTasks(task)}>Save</button>\n              </div>          \n        </div>\n\n        \n    );\n} \n\n\nexport default AddTasks","/Users/katydonoghue/Desktop/garden-app/client/src/components/DisplayTasks.js",["149"],"import { useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    }\n  }));\n\nfunction DisplayTasks(props) {\n      //for material ui select\n  const classes = useStyles();\n\n    const [tasks, setTasks] = useState([])\n    const [dates, setDates] = useState({start_date: new Date(), end_date: new Date('2021-04-07'), complete: false})\n    \n    useEffect(() => {\n        fetchTasks()\n    }, [])\n\n    //change start date for search  \n    const handleStartChange = (date) => {\n        date.setDate(date.getDate())\n        setDates({\n          ...dates,\n          start_date: date\n        })\n      };\n\n    //change end date for search  \n    const handleEndChange = (date) => {\n        date.setDate(date.getDate())\n        setDates({\n          ...dates,\n          end_date: date\n        })\n      };\n\n    //change status from fasle(active) to true(completed)   \n    const handleOnChange = (e) => {\n        setDates({...dates,\n            complete: e.target.value\n        })\n\n    }\n\n    // fetch tasks from database based on user id(token), start date, end date, and status\n    const fetchTasks = () => {\n        axios.get('http://localhost:8080/tasks/display',\n        {params: dates})\n        .then(response => {\n            setTasks(response.data)\n        })\n    }\n\n    //delete task by id number\n    const handleDelete = (id) => {\n      console.log(\"delete fired\")\n      axios.delete(`http://localhost:8080/tasks/delete/${id}`)\n      .then(response => {\n        let success = response.data.success\n        if (success) {\n          fetchTasks()\n        } else {\n          console.log(\"did not update\")\n        }\n      })\n\n    }\n\n\n    //change complete false to true in db\n    const handleComplete = (id) => {\n      \n      axios.post(`http://localhost:8080/tasks/complete/${id}`)\n      .then(response => {\n        let success = response.data.success\n        if (success) {\n          fetchTasks()\n        } else {\n          console.log(\"did not update\")\n        }\n      })\n\n    }\n\n    //create task display\n    const taskItems = tasks.map(task => {\n        return <div key={task.id}>\n            {task.task_name}\n            {task.task_description}\n            {task.task_date}\n            <button onClick={() => handleComplete(task.id)}>Complete</button>\n            <a href={`/edit-tasks/${task.id}`} ><button>Edit</button></a>\n            \n            <button onClick={() => handleDelete(task.id)}>Delete</button>\n        </div>\n    })\n    \n    return(\n        <div>\n        <h1> Tasks</h1>\n\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Start Date\"\n                    format=\"MM/dd/yyyy\"\n                    name=\"start_date\"\n                    value={dates.start_date}\n                    onChange={handleStartChange}\n                    KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                    }}\n                />\n                </Grid>\n            </MuiPickersUtilsProvider>\n    \n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justify=\"space-around\">\n            <KeyboardDatePicker\n                margin=\"normal\"\n                id=\"date-picker-dialog\"\n                label=\"End Date\"\n                format=\"MM/dd/yyyy\"\n                name=\"end_date\"\n                value={dates.end_date}\n                onChange={handleEndChange}\n                KeyboardButtonProps={{\n                'aria-label': 'change date',\n                }}\n            />\n            </Grid>\n        </MuiPickersUtilsProvider>    \n\n        <FormControl className={classes.formControl}>            \n                  <InputLabel id=\"demo-simple-select-label\">Status</InputLabel>\n                  <Select onChange={handleOnChange} name=\"completed\" value={tasks.completed} labelId=\"demo-simple-select-label\" id=\"demo-simple-select\"  >\n                      <MenuItem value=\"false\">Active</MenuItem>\n                      <MenuItem value=\"true\">Completed</MenuItem>              \n                  </Select>\n              </FormControl>\n\n\n      <button onClick={() => fetchTasks()}>Search</button>\n     \n            {taskItems}\n        </div>\n    )\n}\n\nexport default DisplayTasks","/Users/katydonoghue/Desktop/garden-app/client/src/components/EditTask.js",["150","151"],"import { useEffect, useState } from \"react\"\nimport axios from 'axios'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\n\n\n//for material-ui select\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    }\n    }));\n  \n\nfunction EditTasks(props) {\n    //for material ui select\n    const classes = useStyles();\n\n    const [details, setDetails] = useState([])\n    let id = props.match.params.id\n\n\n    useEffect(() => {\n        // let id = props.match.params.id\n        fetchTaskDetails(id)\n    }, [])\n\n\n       //update with information\n       const handleOnChange = (e) => {\n        setDetails({...details,\n          [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSetDate = (date) => {\n        date.setDate(date.getDate())\n        console.log(date)\n        setDetails({\n          ...details,\n            task_date: date\n        })\n      };\n\n      //update db - need id #\n      const onSaveTasks= (task) => {\n\n        axios.post(`http://localhost:8080/tasks/update-task/${id}`,\n          {\n            data: task\n          })\n          .then(response => {let success = response.data.success\n  \n            if (success) {\n             props.history.push('/tasks')\n            } else {\n                console.log(\"did not update\")\n                }\n            })    \n      }\n\n\n    // get task details\n    const fetchTaskDetails = (id) => {\n        axios.get(`http://localhost:8080/tasks/edit-task/${id}`)\n        .then(response => {\n          setDetails(response.data[0])\n        })\n    }\n\n    console.log(details)\n\n    return(\n        <div>\n           <p>Edit</p>\n           <div>\n            <TextField onChange={handleOnChange} name=\"task_name\" value={details.task_name} id=\"standard-search\" label=\"\" type=\"text\" />\n            </div>\n            <div>                 \n            <TextField onChange={handleOnChange} name=\"task_description\" value={details.task_description} id=\"standard-textarea\" label=\"\" placeholder=\"Description\" multiline />\n            </div>\n            <div>                  \n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <Grid container justify=\"space-around\">\n                <KeyboardDatePicker\n                    margin=\"normal\"\n                    id=\"date-picker-dialog\"\n                    label=\"Date\"\n                    format=\"MM/dd/yyyy\"\n                    name=\"task_date\"\n                    value={details.task_date}\n                    onChange={handleSetDate}\n                    KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                    }}\n                />\n                </Grid>\n            </MuiPickersUtilsProvider>\n            </div>\n              <div>\n                <button onClick={() => onSaveTasks(details)}>Save</button>\n              </div>    \n            \n        </div>\n    )\n}\n\nexport default EditTasks","/Users/katydonoghue/Desktop/garden-app/client/src/utils/history.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/DeleteGarden.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/DeletePlant.js",[],"/Users/katydonoghue/Desktop/garden-app/client/src/components/SetPrimaryGarden.js",["152","153","154"],"/Users/katydonoghue/Desktop/garden-app/client/src/components/Logout.js",[],{"ruleId":"155","severity":1,"message":"156","line":20,"column":8,"nodeType":"157","messageId":"158","endLine":20,"endColumn":19},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"155","severity":1,"message":"163","line":16,"column":9,"nodeType":"157","messageId":"158","endLine":16,"endColumn":16},{"ruleId":"164","severity":1,"message":"165","line":38,"column":32,"nodeType":"166","messageId":"167","endLine":38,"endColumn":34},{"ruleId":"164","severity":1,"message":"165","line":38,"column":28,"nodeType":"166","messageId":"167","endLine":38,"endColumn":30},{"ruleId":"164","severity":1,"message":"165","line":38,"column":52,"nodeType":"166","messageId":"167","endLine":38,"endColumn":54},{"ruleId":"168","severity":1,"message":"169","line":46,"column":18,"nodeType":"170","endLine":46,"endColumn":65},{"ruleId":"164","severity":1,"message":"165","line":49,"column":31,"nodeType":"166","messageId":"167","endLine":49,"endColumn":33},{"ruleId":"164","severity":1,"message":"165","line":49,"column":58,"nodeType":"166","messageId":"167","endLine":49,"endColumn":60},{"ruleId":"164","severity":1,"message":"165","line":49,"column":81,"nodeType":"166","messageId":"167","endLine":49,"endColumn":83},{"ruleId":"171","severity":1,"message":"172","line":4,"column":1,"nodeType":"173","endLine":26,"endColumn":2},{"ruleId":"155","severity":1,"message":"174","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":14},{"ruleId":"155","severity":1,"message":"175","line":7,"column":8,"nodeType":"157","messageId":"158","endLine":7,"endColumn":15},{"ruleId":"176","severity":1,"message":"177","line":50,"column":6,"nodeType":"178","endLine":50,"endColumn":8,"suggestions":"179"},{"ruleId":"164","severity":1,"message":"165","line":82,"column":29,"nodeType":"166","messageId":"167","endLine":82,"endColumn":31},{"ruleId":"155","severity":1,"message":"180","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":13},{"ruleId":"176","severity":1,"message":"181","line":38,"column":8,"nodeType":"178","endLine":38,"endColumn":29,"suggestions":"182"},{"ruleId":"155","severity":1,"message":"175","line":10,"column":8,"nodeType":"157","messageId":"158","endLine":10,"endColumn":15},{"ruleId":"155","severity":1,"message":"163","line":33,"column":9,"nodeType":"157","messageId":"158","endLine":33,"endColumn":16},{"ruleId":"176","severity":1,"message":"183","line":42,"column":6,"nodeType":"178","endLine":42,"endColumn":8,"suggestions":"184"},{"ruleId":"155","severity":1,"message":"163","line":25,"column":9,"nodeType":"157","messageId":"158","endLine":25,"endColumn":16},{"ruleId":"164","severity":1,"message":"165","line":30,"column":26,"nodeType":"166","messageId":"167","endLine":30,"endColumn":28},{"ruleId":"155","severity":1,"message":"163","line":36,"column":11,"nodeType":"157","messageId":"158","endLine":36,"endColumn":18},{"ruleId":"176","severity":1,"message":"185","line":41,"column":8,"nodeType":"178","endLine":41,"endColumn":10,"suggestions":"186"},{"ruleId":"155","severity":1,"message":"163","line":32,"column":11,"nodeType":"157","messageId":"158","endLine":32,"endColumn":18},{"ruleId":"176","severity":1,"message":"187","line":41,"column":8,"nodeType":"178","endLine":41,"endColumn":10,"suggestions":"188"},{"ruleId":"155","severity":1,"message":"189","line":2,"column":8,"nodeType":"157","messageId":"158","endLine":2,"endColumn":20},{"ruleId":"155","severity":1,"message":"190","line":4,"column":8,"nodeType":"157","messageId":"158","endLine":4,"endColumn":18},{"ruleId":"155","severity":1,"message":"191","line":7,"column":7,"nodeType":"157","messageId":"158","endLine":7,"endColumn":16},"no-unused-vars","'requireAuth' is defined but never used.","Identifier","unusedVar","no-native-reassign",["192"],"no-negated-in-lhs",["193"],"'classes' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Button' is defined but never used.","'history' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'newPlant', 'props.displayGardenID', and 'props.displayZone'. Either include them or remove the dependency array. You can also do a functional update 'setNewPlant(n => ...)' if you only need 'newPlant' in the 'setNewPlant' call.","ArrayExpression",["194"],"'axios' is defined but never used.","React Hook useEffect has a missing dependency: 'displayGardenOptions'. Either include it or remove the dependency array.",["195"],"React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.",["196"],"React Hook useEffect has a missing dependency: 'fetchTasks'. Either include it or remove the dependency array.",["197"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["198"],"'FavoriteIcon' is defined but never used.","'IconButton' is defined but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},"Update the dependencies array to be: [newPlant, props.displayGardenID, props.displayZone]",{"range":"209","text":"210"},"Update the dependencies array to be: [displayGardenOptions, props.updateGardens]",{"range":"211","text":"212"},"Update the dependencies array to be: [props.match.params.id]",{"range":"213","text":"214"},"Update the dependencies array to be: [fetchTasks]",{"range":"215","text":"216"},"Update the dependencies array to be: [id]",{"range":"217","text":"218"},[1298,1300],"[newPlant, props.displayGardenID, props.displayZone]",[928,949],"[displayGardenOptions, props.updateGardens]",[1025,1027],"[props.match.params.id]",[1170,1172],"[fetchTasks]",[984,986],"[id]"]